[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "HSMA - Programming in Python",
    "section": "",
    "text": "Attribution and Acknowledgements\nThis book is an adaptation of a series of lectures given by Dr Daniel Chalk as part of the HSMA programme.\nAll lectures and accompanying code examples and exercises were written by Dr Daniel Chalk and made available under the CC BY-NC-SA 4.0 licence.\nThe chapters often replicate the wording of these lectures nearly exactly, with tweaks and additions for readability and to better suit the format of a book made by Sammi Rosser.\nHSMA 6: Intro to Programming Concepts\nSlides\nVideo\nHSMA 6: Intro to VSCode\nSlides\nVideo\nHSMA 6: Python Programming Lecture 1\nSlides\nGithub\nHSMA 6: Python Programming Lecture 2\nSlides\nGithub\nHSMA 6: Python Programming Lecture 3\nSlides\nGithub",
    "crumbs": [
      "Attribution and Acknowledgements"
    ]
  },
  {
    "objectID": "index.html#the-hsma-programme",
    "href": "index.html#the-hsma-programme",
    "title": "HSMA - Programming in Python",
    "section": "The HSMA Programme",
    "text": "The HSMA Programme\nTo find out more about the HSMA programme, visit our\nWebsite\nGithub Repository\nYoutube Channel",
    "crumbs": [
      "Attribution and Acknowledgements"
    ]
  },
  {
    "objectID": "index.html#licencing-of-this-ebook",
    "href": "index.html#licencing-of-this-ebook",
    "title": "HSMA - Programming in Python",
    "section": "Licencing of this Ebook",
    "text": "Licencing of this Ebook\nThe text and images in this book are licenced under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License.",
    "crumbs": [
      "Attribution and Acknowledgements"
    ]
  },
  {
    "objectID": "how_to_use_book.html",
    "href": "how_to_use_book.html",
    "title": "How to use this book",
    "section": "",
    "text": "Exercises\nThe exercises throughout the book can be undertaken on a web-based coding platform called Google Colab.\nYou will need to be logged in to a google account in your browser.\nUsing the Google Colab button on each exercise page below will open a fresh copy of the notebook to work on - your changes will not be visible to anyone else.\nHowever, if you want to be able to refer back to your version of the notebook in future, make sure you click ‘File –&gt; Save to Drive’. Your changes will then be saved to your own account, and you can access your edited copy of the notebook from https://colab.research.google.com/.",
    "crumbs": [
      "How to use this book"
    ]
  },
  {
    "objectID": "how_to_use_book.html#exercises",
    "href": "how_to_use_book.html#exercises",
    "title": "How to use this book",
    "section": "",
    "text": "Tip\n\n\n\nNote: when you first run a cell, you will need to click ‘run anyway’ in the popup that appears.\nThis is a standard pop-up that appears for any notebook you haven’t created from scratch yourself!",
    "crumbs": [
      "How to use this book"
    ]
  },
  {
    "objectID": "intro_to_programming_concepts.html",
    "href": "intro_to_programming_concepts.html",
    "title": "1  An Introduction to Programming Concepts",
    "section": "",
    "text": "If you are following along with this as part of the HSMA course, we’d strongly recommend that you watch the video below as it will help give you a grounding in the concepts underlying programming before you start working with code.\nIt’s not an absolute necessity for continuing through the rest of this book - but you may still find it useful if you are brand new to programming and have not come across concepts like conditional logic (if/else if/else), loops and object-oriented programming.\nAlternatively, if you get a bit stuck on one of the coding sections later on, you may wish to return to this video to have a bit more of an in-depth look at those concepts.",
    "crumbs": [
      "An Optional Introduction to Programming Concepts",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>An Introduction to Programming Concepts</span>"
    ]
  },
  {
    "objectID": "intro_to_setup.html",
    "href": "intro_to_setup.html",
    "title": "2  An Introduction to Setting Up the Required Software for Python Coding",
    "section": "",
    "text": "2.1 As a casual reader\nIf you are just working through this book to get an introduction to Python, you do not need to install any software.\nYou can use the interactive code examples and exercises as explained in the how to use this book section.\nIn short, interactive code cells throughout the book allow you to change and run the code samples given.\nThe Google Colab link buttons then take you to your own personal coding environment for the more involved exercises in the sessions.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An Introduction to Setting Up the Required Software for Python Coding</span>"
    ]
  },
  {
    "objectID": "intro_to_setup.html#as-a-member-of-the-hsma-course",
    "href": "intro_to_setup.html#as-a-member-of-the-hsma-course",
    "title": "2  An Introduction to Setting Up the Required Software for Python Coding",
    "section": "2.2 As a member of the HSMA course",
    "text": "2.2 As a member of the HSMA course\nIf you are working through this book as part of the HSMA programme, it’s highly recommended that you follow the install instructions on this page.\nSession 1D of the programme, linked below, then goes through the setup and use of VSCode in greater depth. This will help ensure you are in a good place to continue through the later sections of the HSMA programme, which expect you to be using VSCode and some additional pieces of software such as Anaconda and Quarto.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An Introduction to Setting Up the Required Software for Python Coding</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html",
    "href": "creating_environments_python.html",
    "title": "4  Creating Environments with Python",
    "section": "",
    "text": "4.1 Creating Environments Using VSCode\nUnlike when we create environments using Anaconda - where all of our environments will, by default, go into a central location with the other environments we have created, this method will instead create an environment in the same location as the code files you will be working on.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html#creating-environments-using-vscode",
    "href": "creating_environments_python.html#creating-environments-using-vscode",
    "title": "4  Creating Environments with Python",
    "section": "",
    "text": "4.1.1 Setting an environment up using a requirements.txt file\nIn HSMA, we will be using one environment per module.\nFor example, the environment used for module 2 (discrete event simulation) will be used for all three of those sessions, but will then be different to the environment used for module 3 (geographic modelling).\nWhy does this matter? When using the approach in this chapter to creating an environment, you will want to structure your folders in such a way that allows you to create and reuse that environment for the whole module, rather than creating the environment anew for each session (or trying to navigate to that environment from a different location, which can be somewhat clunky).\nIn practice, what this means is you will want a top-level folder called something like ‘HSMA’, with a subfolder per module, like this:\n\nWithin this subfolder you will need to download and unzip the module folders from the HSMA Github\n\nIn this folder, you will then want to put the requirements.txt file for the module.\nAn environment will contain a specific combination of packages; each module uses a specific set of packages together, and you will be provided with a type of file (a requirements.txt file) that allows you to install all of the required packages in one go.\nrequirements.txt is effectively the equivalent of conda’s environment.yml file.\nIt just lists the packages - and optionally, the versions of these packages - that need to be installed into the environment.\nThe contents of a requirements.txt file might look a bit like this:\nnumpy==1.25.2\npandas==2.0.3\nsimpy==4.0.2\nThis will just tell VSCode to install numpy v1.25.2, pandas v2.0.3, and simpy v4.0.2 from the internet.\nAny additional packages these packages themselves rely on behind the scenes will automatically be downloaded as well.\n\n\n\n\n\n\nTip\n\n\n\nIt’s important that your requirements.txt file goes directly inside your module folder - otherwise it may not be picked up in a later step, meaning your environment won’t contain these specified packages.\nThis means your module subfolder may look something like this.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAll requirements.txt files can be downloaded from the HSMA Github.\nFollow this link\n\nClick into the relevant module folder and then the requirements.txt file.\nYou can then download this file by clicking ‘download raw file’.\n\nThen save this file to the relevant module’s folder on your computer.\n\n\n\n\n4.1.1.1 Opening a module folder in VSCode\nYou will want to open up the entire module folder in VSCode for the next step.\nFrom within VSCode, choose File –&gt; Open Folder.\n\nNavigate to the folder where you have your HSMA exercises stored.\n\nClick on the relevant module subfolder, but don’t enter it (i.e. don’t double click!). It should just be highlighted, then click on the ‘Select Folder’ button in the bottom right.\n\nYour explorer window will then look something like this.\nYou may need to click on the explorer icon - which looks like two pieces of paper on top of each other and is the first icon in the list on the left of your screen - to make this panel appear.\n\n\n\n4.1.1.2 Creating the environment\nPress CTRL + SHIFT + P to bring up the command pallette.\nChoose Python: Create a Virtual Environment. If this does not appear in the initial list, you may need to start typing ‘virtual’ to filter the list of available commands until Python: Create a Virtual Environment shows up.\n\nNext, select Venv.\n\nChoose a version of Python - you may only have one available.\n\nIf you put the requirements.txt file in the location specified above, you will then get this option:\n\nClick the tickbox next to it to indicate you do want the packages mentioned in requirements.txt to be installed, then click ‘Ok’.\n\nFinally, wait for the environment to be created. This may take 1-15 minutes depending on the speed of your internet connection and how many packages are being installed.\n\nAt the end, you will see a prompt appear along these lines.\n\nIf you now create a new terminal, you should see that the prompt now begins with (.venv), indicating that the environment is selected.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThere are a few reasons why this might not appear.\nYou may need to open a new terminal.\n\nIf your default terminal is a powershell terminal, try opening a cmd terminal instead.\n\nOtherwise you may need to close and reopen vscode, making sure you reopen the same folder again if it does not load automatically.\n\n\nWhen you then try to run code in the interactive terminal, you can see in the top-right corner that the .venv we have created has been automatically selected.\n\n\n\n\n\n\n\nTip\n\n\n\nThe first time you try to run code in the interactive terminal or a Jupyter notebook, you will be asked to install the ipynotebook package. Click ‘install’ and wait until the install finished. You should only have to do this once for each new environment you create.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html#setting-environments-up-manually-without-a-requirements.txt",
    "href": "creating_environments_python.html#setting-environments-up-manually-without-a-requirements.txt",
    "title": "4  Creating Environments with Python",
    "section": "4.2 Setting Environments up Manually (without a requirements.txt)",
    "text": "4.2 Setting Environments up Manually (without a requirements.txt)\nIf you do not have a requirement.txt file, you can still create a virtual environment.\nFollow the steps above to open the folder you want the environment to be created in within VSCode, and then follow the steps through.\nAfter the choice to create a venv and you have selected a version of Python, you will not be provided with this option.\n\nInstead, the environment will just be created, containing no additional packages.\nWithin the terminal, first check to see that the command prompt begins with (.venv).\n\nYou can then run the following command to install a new package.\nHere, we are telling it to install the most recent version of the matplotlib graphing package with the code pip install matplotlib.\n\n\n\n\n\n\n\nTip\n\n\n\nDepending on how Python has been set up on your machine, this command prompt may not be able to find the pip package mangager with the command.\nIf you receive an error message when trying to run pip install matplotlib, try\npython -m pip install matplotlib\ninstead.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html#creating-a-requirements.txt-file-from-an-environment.yml-file",
    "href": "creating_environments_python.html#creating-a-requirements.txt-file-from-an-environment.yml-file",
    "title": "4  Creating Environments with Python",
    "section": "4.3 Creating a requirements.txt file from an environment.yml file",
    "text": "4.3 Creating a requirements.txt file from an environment.yml file\nAn environment.yml file contains additional details that the Anaconda package manager requires.\nHowever, you may be able to create a new blank .txt file in a program like Notepad and build the requirements.txt from the environment.yml.\nFor example, this is the environment.yml file from module 2 of HSMA.\nname: des\nchannels:\n  - defaults\ndependencies:\n  - python=3.11.4\n  - ipykernel\n  - pip:\n    - simpy==4.0.2\n    - numpy==1.25.2\n    - pandas==2.0.3\nprefix: C:\\Users\\dan\\anaconda3\\envs\\des\nThe equivalent requirements.txt file is just the packages from the pip section.\nsimpy==4.0.2\nnumpy==1.25.2\npandas==2.0.3\n\n\n\n\n\n\nNote\n\n\n\nIn the HSMA programme, all of our environment.yml files point towards the pip installer rather than conda.\nHowever, in environment.yml files found elsewhere, you may need to look at what",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html#dealing-with-dependency-issues",
    "href": "creating_environments_python.html#dealing-with-dependency-issues",
    "title": "4  Creating Environments with Python",
    "section": "4.4 Dealing with dependency issues",
    "text": "4.4 Dealing with dependency issues\nAs mentioned at the beginning of the section, unlike when we create an environment using Anaconda, we cannot easily download a specific version of Python as part of the process when using this method. Instead, we can only choose from the versions of Python we have available on our machine. For some packages, this may cause issues preventing the install from proceeding.\nOne option is to change or remove the version numbers from the requirements.txt file.\nFor example, this original file\nsimpy==4.0.2\nnumpy==1.25.2\npandas==2.0.3\nwould become\nsimpy&gt;=4.0.2\nnumpy&gt;=1.25.2\npandas&gt;=2.0.3\nThis gives pip more flexibility to install newer versions of the packages that may be compatible with the version of Python you are using.\n\n\n\n\n\n\nWarning\n\n\n\nDifferent versions of packages may remove or significantly change functions that certain code examples rely on, so this should be avoided where possible.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "creating_environments_python.html#alternative-approaches",
    "href": "creating_environments_python.html#alternative-approaches",
    "title": "4  Creating Environments with Python",
    "section": "4.5 Alternative Approaches",
    "text": "4.5 Alternative Approaches\nWhile we have used the venv capabilities built in to VSCode here, it is possible to use venv entirely separately from VSCode.\nYou could also choose a central folder where you save all of your environments.",
    "crumbs": [
      "Setup for the HSMA Course - Using VSCode, Python and Anaconda",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Creating Environments with Python</span>"
    ]
  },
  {
    "objectID": "intro_to_python.html",
    "href": "intro_to_python.html",
    "title": "5  Intro to Python",
    "section": "",
    "text": "Python is a high-level programming language that has been around since the early 90s, but has particularly come to prominence in the last 15 years. It is now the most widely used language in the world.\nA key feature of Python is that it is highly extensible. This means we can bring in code that others have written to extend the core functionality of Python (we saw that in the last session when we talked about packages).\nPython also allows us to get quick results and build iteratively making it perfect for scientific computing (such as modelling and data science).\n\n\n\n\n\n\nTip\n\n\n\nYes - it really is named after British comedy troupe Monty Python!",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Intro to Python</span>"
    ]
  },
  {
    "objectID": "printing.html",
    "href": "printing.html",
    "title": "6  Printing",
    "section": "",
    "text": "There is a tradition in Computer Science that the first program anyone should write in a Programming Language is one that writes the words “Hello World!” to the screen.\n(Look, back in my day (the 80s), getting a machine to display anything on your TV was pretty amazing stuff!)\nLet’s write a Hello World program in Python.\nIn Principles of Programming, we talked about functions. We said that they are bundles of code that we can run every time we call them. We can give them optional inputs, and may get some outputs.\nTo write text to the screen in Python, we use something known as the print() function. The input (that we put in the brackets) is the thing we want it to write to the screen.\nLet’s try it!\nWe use quotation marks “ to denote a string (ie text - a series of characters). We can also use single quotes ’. Either is fine, but you must use the same one to open and close the same string.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nIf we were to do this in VSCode, we would create a new Python(.py) file\n\nWhen we type the above, nothing happens. That’s because we need to run the program. \nThis is exciting isn’t it. (Don’t worry, it gets better)",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Printing</span>"
    ]
  },
  {
    "objectID": "variables.html",
    "href": "variables.html",
    "title": "7  Variables",
    "section": "",
    "text": "In Principles of Programming, we talked about variables. We said these are essentially boxes that store information of a certain type so the program can refer to it later.\nIn many programming languages, we need to create a variable by declaring it. This means specifying its type alongside its name.\nIn Python, things are much more laid back. Variables are dynamic, so we simply assign a value to a name to create the variable, and the type will be automatically set based on the Value we provide. We assign values in Python using the assignment operator =. It basically says “Let this have a value of this”.\nThis can cause confusion if you’re new to coding. = does not mean ‘equals’.\nWhat will be the variable type of each of these variables after assignment? \nBecause variables in Python are dynamic, their type will change if we give it a value of a different type :\n\n\n7.0.1 Dealing with spaces in names\nIn programming languages, a space indicates a separation between instructions, values etc. So if we want to name something (like a variable) with multiple words then we can’t use spaces. There are two principle conventions for how we deal with this :\n\nYou can use whichever you prefer (though ensure you’re consistent) but snake_case is generally preferred for (and recommended by the developers of) Python.\n\n\n7.0.2 Variable Types - Single Items\n\nLet’s remind ourselves of some of the main types of variable, and see what they look like in Python.\n\n7.0.2.1 Numbers\nIntegers (int) are whole numbers Floating point numbers (float) are numbers with up to 15 decimal places\n\n\n\n7.0.2.2 Text\nStrings (str) are sequences of characters denoted using “ or ‘ (Note - Python does not have a separate variable type for characters, they are just strings of length 1)\n\n\n\n7.0.2.3 Truth\nBooleans (bool) take one of two values to indicate whether they are True or False.\n\n\n\n\n7.0.3 Variables that store Multiple Items\n\n\n7.0.3.1 Lists\nLists (list) are sequences of items, where the order matters. Duplicates allowed.\n\n\n\n7.0.3.2 Sets\nSets (set) are unordered sequences of unique items.\n\n\n\n\n\n\n\nTip\n\n\n\nYou won’t come across sets too often in Python - so don’t worry about them too much for now!\n\n\n\n\n7.0.3.3 Tuples\nTuples (tuple) are ordered sequences (like a list) but are immutable (once created, they cannot be changed)\n\n\n\n\n\n\n\nTip\n\n\n\nYou won’t come across tuples too often in Python - so don’t worry about them too much for now!\n\n\n\n\n7.0.3.4 Dictionaries\nDictionaries (dict) are unordered collections of key-value pairs",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Variables</span>"
    ]
  },
  {
    "objectID": "fstrings.html",
    "href": "fstrings.html",
    "title": "8  Variables and Printing together - the fString",
    "section": "",
    "text": "Python has a rather neat type of string called an fString. These are strings where we can include formatting within the string to define where we want dynamic text.\nWe often want to do this where we want to insert the value of a variable into a string of text.\ne.g. “Her name is &lt;&gt;”\nTo use fStrings, we simply put the character f immediately before our opening quotation mark, and use curly brackets to denote where we want to include the name of a variable, so that Python will pull in the value in that variable instead of hard-coded text.\nExample :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also do some other cool things with fStrings. We’re not restricted to just variable names either, we can put in the curly brackets any instruction whose output will result in something that can be interpreted as a string (ie some characters).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Variables and Printing together - the fString</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html",
    "href": "user_input_casting.html",
    "title": "9  User Input and Changing Variable Types",
    "section": "",
    "text": "9.1 User Input\nSometimes we need to ask the user to input something in order to continue with the program.\nIn Python, getting input from the user is easy. We simply tell Python that we need an input, any message we want to display to the user, and the name of the variable in which we want to store the input.\nage = input(\"How old are you?: \")",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html#user-input",
    "href": "user_input_casting.html#user-input",
    "title": "9  User Input and Changing Variable Types",
    "section": "",
    "text": "Important\n\n\n\nHOWEVER, when we read in the inputs from a user, regardless of what it is supposed to represent, they will be read in as a sequence of characters. In other words, as a string.\nClearly, if we’re reading in something intended to be a number (like an age) that’s no good. So what can we do?\nWell, we are wizards…",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "user_input_casting.html#casting",
    "href": "user_input_casting.html#casting",
    "title": "9  User Input and Changing Variable Types",
    "section": "9.2 Casting",
    "text": "9.2 Casting\nPython allows us to turn one type of variable into another, like a magic spell. This is known as casting. As long as the value stored in the variable can be interpreted as the type we’re trying to cast it into, it’ll work (otherwise we’ll get an error).\nTo cast, we simply wrap the variable on which we’re performing the cast in brackets, and tell it the type of variable we want it to become.\n\nage = input(\"How old are you?: \")\nint(age)\n\nWe could also do that all in one line of code :\n\nage = int(input(\"How old are you?: \"))\n\nThis will only work if the user inputs something that can be interpreted as an integer. “42” will work. “Too old” will not work.\n\n\n\n\n\n\nWarning\n\n\n\nNote - you can cast a float value (e.g. 42.6547) as an integer (it’ll just ignore the decimal place and create an int value of 42 - it won’t round).\nHOWEVER, this won’t work for strings - you can’t cast “42.6547” as a string into an int.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>User Input and Changing Variable Types</span>"
    ]
  },
  {
    "objectID": "mathematical_operators.html",
    "href": "mathematical_operators.html",
    "title": "10  Mathematical Operators",
    "section": "",
    "text": "10.1 Modulus\n10 % 3 This means divide 10 by 3, and return the remainder.\n3 goes into 10 three times, but we’re left with 1 left over (3 x 3 = 9) - a remainder of 1.\nSo 10 % 3 = 1.\n20 % 2 This means divide 20 by 2, and return the remainder.\n2 goes into 20 exactly 10 times, with nothing left over (no remainder).\nSo 20 % 2 = 0.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Mathematical Operators</span>"
    ]
  },
  {
    "objectID": "mathematical_operators.html#modulus",
    "href": "mathematical_operators.html#modulus",
    "title": "10  Mathematical Operators",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Mathematical Operators</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html",
    "href": "exercise_10_years_forward.html",
    "title": "11  Exercise: 10 years forward",
    "section": "",
    "text": "11.1 Sample Answer",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html#sample-answer",
    "href": "exercise_10_years_forward.html#sample-answer",
    "title": "11  Exercise: 10 years forward",
    "section": "",
    "text": "Click here to view a sample answer\n\n\n\n\n\n\nname = input(\"What is your name?\")\nage = int(input(\"How old are you?\"))\n\nprint (f\"Hello {name}.  In 10 years time, you will be {age+10}\")",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "exercise_10_years_forward.html#answer-video",
    "href": "exercise_10_years_forward.html#answer-video",
    "title": "11  Exercise: 10 years forward",
    "section": "11.2 Answer Video",
    "text": "11.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Exercise: 10 years forward</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_intro_python.html",
    "href": "additional_exercises_resources_intro_python.html",
    "title": "12  Additional Exercises and Resources - Your First Python",
    "section": "",
    "text": "12.1 Coding Notebooks\nDr Pawel Orzechowski of the University of Edinburgh has made a range of programming exercises freely available.\nYou can visit his Code Storytelling website here to watch some additional videos that go with these exercises.\nPractice running code, making variables, strings, printing, simple data types, casting, user input, simple mathematical operations:\nGet more practice with basic code, understanding errors, and variable types:",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Additional Exercises and Resources - Your First Python</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_intro_python.html#sololearn",
    "href": "additional_exercises_resources_intro_python.html#sololearn",
    "title": "12  Additional Exercises and Resources - Your First Python",
    "section": "12.2 Sololearn",
    "text": "12.2 Sololearn\nThere is a course on Sololearn called ‘Introduction to Python’\nThis has some interactive code exercises that build up more gradually. You do have to sign up for a free account - but you don’t need to sign up for the pro trial or a pro account to access 90% of that particular course.\nThere is also an app version of this site for your phone/tablet so you can fit in practice on the go or whenever you have a spare moment.",
    "crumbs": [
      "Your First Steps in Python",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Additional Exercises and Resources - Your First Python</span>"
    ]
  },
  {
    "objectID": "comments.html",
    "href": "comments.html",
    "title": "13  Comments",
    "section": "",
    "text": "When writing code, it is extremely important to write comments that explain how each piece of code works (this might be for an individual line of code, or a block of code).\nThis is important to help others understand how your code works, but also to help you remember how your code works…\n\nThere are two ways of writing comments in Python.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Comments</span>"
    ]
  },
  {
    "objectID": "conditional_logic.html",
    "href": "conditional_logic.html",
    "title": "14  Conditional Logic",
    "section": "",
    "text": "14.1 Comparison Operators\nThere are many comparison operators in Python. We use these to express relational statements that resolve to a Boolean - True or False. They are therefore used in conditional logic.\nYou won’t be able to play along, but have a watch of this game of ‘comparison operators’ to learn more about comparisons.",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Conditional Logic</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html",
    "href": "exercise_conditional_logic_etc.html",
    "title": "15  Exercise: Stepping Up",
    "section": "",
    "text": "15.1 Sample Answers",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Exercise: Stepping Up</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html#sample-answers",
    "href": "exercise_conditional_logic_etc.html#sample-answers",
    "title": "15  Exercise: Stepping Up",
    "section": "",
    "text": "Tip\n\n\n\nOpen SOLUTIONS in Google Colab:",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Exercise: Stepping Up</span>"
    ]
  },
  {
    "objectID": "exercise_conditional_logic_etc.html#answer-video",
    "href": "exercise_conditional_logic_etc.html#answer-video",
    "title": "15  Exercise: Stepping Up",
    "section": "15.2 Answer Video",
    "text": "15.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Exercise: Stepping Up</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_conditional_logic.html",
    "href": "additional_exercises_resources_conditional_logic.html",
    "title": "16  Additional Exercises and Resources - Conditional Logic",
    "section": "",
    "text": "16.1 Coding Notebooks\nDr Pawel Orzechowski of the University of Edinburgh has made a range of programming exercises freely available.\nYou can visit his Code Storytelling website here to watch some additional videos that go with these exercises.\nPractice Conditional Logic (if/elif/else), comparison operators:",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Additional Exercises and Resources - Conditional Logic</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_conditional_logic.html#sololearn",
    "href": "additional_exercises_resources_conditional_logic.html#sololearn",
    "title": "16  Additional Exercises and Resources - Conditional Logic",
    "section": "16.2 Sololearn",
    "text": "16.2 Sololearn\nThere is a course on Sololearn called ‘Introduction to Python’\nThis has some interactive code exercises that build up more gradually. You do have to sign up for a free account - but you don’t need to sign up for the pro trial or a pro account to access 90% of that particular course.\nThere is also an app version of this site for your phone/tablet so you can fit in practice on the go or whenever you have a spare moment.",
    "crumbs": [
      "Your Next Python Skills",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Additional Exercises and Resources - Conditional Logic</span>"
    ]
  },
  {
    "objectID": "loops.html",
    "href": "loops.html",
    "title": "17  Loops",
    "section": "",
    "text": "17.1 For Loops\nA simple for loop might look like this.\nThe code in the for loop can be anything you like!",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#for-loops",
    "href": "loops.html#for-loops",
    "title": "17  Loops",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n17.1.1 Using a custom range in for loops\nA more advanced for loop might specify which number to start and finish at.\nWe can use the range() function in python to do this.\nThe first argument to range specifies which number to start at, and the second specifies where to end.\nNote that our counter will start at the number specified, but the end number won’t be included!\n\nYou can play around with this in the code cell below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n17.1.2 Using a custom increment in for loops\nTaking this even further, we can add a third parameter to the range() function. This changes the step (the gap) between our numbers.\n\nYou can play around with this in the code cell below.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n17.1.3 Counting down\nWe can also count down. This is sometimes referred to as a negative increment or decrement.\n\nPlay around with this here.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n17.1.4 Iterating through a list in a for loop\nOne very powerful aspect of for loops is being able to iterate through a list.\n\nFor example - you might have a list of 5 regions you need to run a report for. You could create a list of those regions, filter your dataset down to just the data for that region, then export a data file for each separate region. It’s a very useful pattern!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#while-loops",
    "href": "loops.html#while-loops",
    "title": "17  Loops",
    "section": "17.2 While Loops",
    "text": "17.2 While Loops\n\nWhile loops are another powerful type of loop, though you might use them less frequently than for loops.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#breaking-from-loops",
    "href": "loops.html#breaking-from-loops",
    "title": "17  Loops",
    "section": "17.3 Breaking from loops",
    "text": "17.3 Breaking from loops\n\nSometimes we want to break out of a loop mid-flow. For example, we may have a for loop, and want to break out of it when a condition has been met.\nWe can do this using the break command, which immediately breaks out of the loop and continues as though the for loop had completed.\n\nYou can experiment with changing the break condition in the code cell below. What happens if you change the condition to total &gt; 6? What about total &gt; 11?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "loops.html#infinite-loops",
    "href": "loops.html#infinite-loops",
    "title": "17  Loops",
    "section": "17.4 Infinite loops",
    "text": "17.4 Infinite loops\n\nSometimes you can accidentally write an infinite loop – one that will never end. Anybody who used to play with BASIC in the old days will remember an example of an infinite loop :\n10 PRINT “HELLO WORLD”\n20 GOTO 10\nMore modern examples include setting up a while loop that can never stop.\nThis loop will never terminate because we never change the value of true!\n\nIn the loop below - assuming our value of x was greater than or equal to 3 to begin with - it will keep triggering because x is getting bigger with each loop (as we’re adding 1 to it).\n\n\n\n\n\n\n\nTip\n\n\n\nIf you find yourself stuck in an infinite loop (and you will at some point), you need to interrupt the kernel and terminate the program.\nTo do this in VSCode, click the Interrupt button in your Interactive Window (Note - if it is currently expecting a user input, you’ll need to interrupt and then cancel out of the user input).",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Loops</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html",
    "href": "exercise_loops.html",
    "title": "18  Exercise: Loops",
    "section": "",
    "text": "18.1 Sample Answers",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exercise: Loops</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html#sample-answers",
    "href": "exercise_loops.html#sample-answers",
    "title": "18  Exercise: Loops",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen Exercise 3 SOLUTIONS in Google Colab:",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exercise: Loops</span>"
    ]
  },
  {
    "objectID": "exercise_loops.html#answer-video",
    "href": "exercise_loops.html#answer-video",
    "title": "18  Exercise: Loops",
    "section": "18.2 Answer Video",
    "text": "18.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exercise: Loops</span>"
    ]
  },
  {
    "objectID": "lists.html",
    "href": "lists.html",
    "title": "19  Lists",
    "section": "",
    "text": "19.1 Indices\nLists are ordered, which means that we can refer to elements in a list by their location - their index.\nTo refer to an element in a list by its index, we use the following notation :\nmy_list[x]\nwhere x is the index number of the element we want to reference.\nHOWEVER, Python (like many languages) starts counting from 0. Which means the first element of a list has an index of 0, the second an index of 1 etc. This will catch you out if you’re new to coding, especially as a few constructs in Python start counting from 1…\nSo, to reference the fourth element in a list my_list, we would use :\nmy_list[3]\nLet’s run this below! Try changing the index (the ‘3’) in the line print(my_list[3])",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#indices",
    "href": "lists.html#indices",
    "title": "19  Lists",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#negative-indexing-and-slicing",
    "href": "lists.html#negative-indexing-and-slicing",
    "title": "19  Lists",
    "section": "19.2 Negative Indexing and Slicing",
    "text": "19.2 Negative Indexing and Slicing\n\nWe can also use negative indexing to refer to an item based on its position from the end of the list. Here, -1 would refer to the last element, -2 to the penultimate element etc.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to refer to multiple items in a list, we can use a slice. Here, we use a colon to denote the indices of the start and end elements that we want.\n\n\n\n\n\n\nTip\n\n\n\nThe start element is included.\nThe end element is not included.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#length-and-removal",
    "href": "lists.html#length-and-removal",
    "title": "19  Lists",
    "section": "19.3 Length and Removal",
    "text": "19.3 Length and Removal\nTo find the length of a list (the number of elements it contains), we simply use the len() function :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can remove an item from a list by specifying the element we want to remove, and using remove :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr by giving the index of the element we want to remove, and using pop:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf we want to remove the last element from a list, we can just use pop without specifying an index :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#checking-existence",
    "href": "lists.html#checking-existence",
    "title": "19  Lists",
    "section": "19.4 Checking Existence",
    "text": "19.4 Checking Existence\nWe can check whether or not an element exists in a list using conditional logic combined with the in keyword :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr whether something is not in a list by additionally using the not keyword :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "lists.html#copying-lists",
    "href": "lists.html#copying-lists",
    "title": "19  Lists",
    "section": "19.5 Copying lists",
    "text": "19.5 Copying lists\nIf we want to copy a list, we might be tempted to write this :\n\nmy_list = [3, 4, 7, \"hello\", 2]\ncopy_of_my_list = my_list\n\nThe previous example will create a second reference to the same list. In other words, there is still one list, just two different names for it.\nTo create a copy, we need to use the copy() function of a list object :\n\nmy_list = [3, 4, 7, \"hello\", 2]\ncopy_of_my_list = my_list.copy()\n\nNow we have two lists, and can work with them independently (ie changes made to one will not affect the other).",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Lists</span>"
    ]
  },
  {
    "objectID": "list_comprehensions.html",
    "href": "list_comprehensions.html",
    "title": "20  List Comprehensions",
    "section": "",
    "text": "Python has a really useful feature called “List Comprehension” that allows us to easily create lists based off of other lists using a single line of code.\nLet’s consider an example. Let’s imagine we have a list of numbers, and we want to set up a second list containing all the numbers of the first list, but doubled. Here’s one way we could do (without list comprehension) :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBut a list comprehension replaces three of the lines of code here to create list_b with a single line of code :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou may find it easier to read a list comprehension from the middle. The above says for each value in list_a, give me back that value doubled and add that as an element to list_b.\nWe can also add conditional logic to a list comprehension, so that we only include elements that meet certain criteria.\nWhat numbers will be in list_b in the example below?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe’ve asked the list comprehension to only include numbers that have a remainder of 0 when dividing by 2, and dividing an even number by 2 will give a remainder of 0.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>List Comprehensions</span>"
    ]
  },
  {
    "objectID": "dictionaries.html",
    "href": "dictionaries.html",
    "title": "21  Dictionaries",
    "section": "",
    "text": "21.1 Getting values from dictionaries\nTo refer to a value in a dictionary, we just provide the key :",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "dictionaries.html#getting-values-from-dictionaries",
    "href": "dictionaries.html#getting-values-from-dictionaries",
    "title": "21  Dictionaries",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "dictionaries.html#updating-values-in-dictionaries",
    "href": "dictionaries.html#updating-values-in-dictionaries",
    "title": "21  Dictionaries",
    "section": "21.2 Updating values in dictionaries",
    "text": "21.2 Updating values in dictionaries\nWe can also update the value of a key this way.\n\n\n\n\n\n\nTip\n\n\n\nNote that when we have included the dictionary key inside the f string, we have used single quotation marks (i.e. ['name'] rather than [\"name\"]). This is because Python would otherwise match up the opening quotation mark of our f-string with the opening quotation mark of [\"name\"], which will cause chaos!\nA good option is to always open your string with double quotes (\") and then use a single quote/apostrophe (') inside your string. This will avoid any problems.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "dictionaries.html#adding-new-key-value-pairs-to-dictionaries",
    "href": "dictionaries.html#adding-new-key-value-pairs-to-dictionaries",
    "title": "21  Dictionaries",
    "section": "21.3 Adding new key-value pairs to dictionaries",
    "text": "21.3 Adding new key-value pairs to dictionaries\nWe can add new key : value pairs in the same way :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "dictionaries.html#deleting-key-value-pairs-from-dictionaries",
    "href": "dictionaries.html#deleting-key-value-pairs-from-dictionaries",
    "title": "21  Dictionaries",
    "section": "21.4 Deleting key-value pairs from dictionaries",
    "text": "21.4 Deleting key-value pairs from dictionaries\nWe can also delete ones we don’t need.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Dictionaries</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html",
    "href": "exercise_lists_dictionaries.html",
    "title": "22  Exercise: Lists and Dictionaries",
    "section": "",
    "text": "22.1 Sample Answers",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Exercise: Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html#sample-answers",
    "href": "exercise_lists_dictionaries.html#sample-answers",
    "title": "22  Exercise: Lists and Dictionaries",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen Exercise 4 SOLUTIONS in Google Colab:",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Exercise: Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "exercise_lists_dictionaries.html#answer-video",
    "href": "exercise_lists_dictionaries.html#answer-video",
    "title": "22  Exercise: Lists and Dictionaries",
    "section": "22.2 Answer Video",
    "text": "22.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Exercise: Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_loops_lists_dictionaries.html",
    "href": "additional_exercises_resources_loops_lists_dictionaries.html",
    "title": "23  Additional Exercises and Resources - Loops, Lists and Dictionaries",
    "section": "",
    "text": "23.1 Coding Notebooks\nDr Pawel Orzechowski of the University of Edinburgh has made a range of programming exercises freely available.\nYou can visit his Code Storytelling website here to watch some additional videos that go with these exercises.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Additional Exercises and Resources - Loops, Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_loops_lists_dictionaries.html#coding-notebooks",
    "href": "additional_exercises_resources_loops_lists_dictionaries.html#coding-notebooks",
    "title": "23  Additional Exercises and Resources - Loops, Lists and Dictionaries",
    "section": "",
    "text": "23.1.1 Loops\nPractice loops:   \nGet more practice with loops:   \n\n\n23.1.2 Lists, list comprehensions, and dictionaries\nPractice lists and dictionaries:   \nPractice lists comprehensions:",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Additional Exercises and Resources - Loops, Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_loops_lists_dictionaries.html#sololearn",
    "href": "additional_exercises_resources_loops_lists_dictionaries.html#sololearn",
    "title": "23  Additional Exercises and Resources - Loops, Lists and Dictionaries",
    "section": "23.2 Sololearn",
    "text": "23.2 Sololearn\nThere is a course on Sololearn called ‘Introduction to Python’.\nThis has some interactive code exercises that build up more gradually. You do have to sign up for a free account - but you don’t need to sign up for the pro trial or a pro account to access 90% of that particular course.\nThere is also an app version of this site for your phone/tablet so you can fit in practice on the go or whenever you have a spare moment.",
    "crumbs": [
      "Loops, Lists and Dictionaries",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Additional Exercises and Resources - Loops, Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "importing_packages.html",
    "href": "importing_packages.html",
    "title": "24  Importing Packages",
    "section": "",
    "text": "One of the huge advantages of Python being the most widely used programming language in the world, is that people have already written lots of useful stuff that we can use ourselves, without needing to reinvent the wheel. These bits of code are known as packages (sometimes referred to as libraries).\nWe can import these libraries into our code (assuming the package is installed), so we can use the stuff they’ve written. Most of the code you write will include imports of packages.\nWe write import statements at the start of our code. It is also good practice to only import what we actually need (so if there’s a big package, and we only need a bit of it, we should try to import only the bit we want).\n\n1 : this says import the package named string 2 : this says import the pyplot bit of code from the matplotlib package, and henceforth I shall refer to it as plt (this is known as an alias) 3 : this says from the wordcloud package import the concept of a WordCloud, as well as a list of Stopwords",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Importing Packages</span>"
    ]
  },
  {
    "objectID": "the_random_library.html",
    "href": "the_random_library.html",
    "title": "25  The Random Library",
    "section": "",
    "text": "Python’s random library contains a number of functions that allow us to generate random numbers. This is useful in modelling, because we’re going to need random numbers if we’re to build stochastic models.\nRemember we talked about probability distributions in session 1B?\n\nTo import the random library, we use the following at the start of our code (we don’t need to install random, as it comes with the Anaconda distribution of Python) :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nImportant\n\n\n\nYou need to run the cell above first, otherwise the examples further down this page won’t work!\n\n\n\n\n\n\n\n\nTip\n\n\n\nTry running the cells below multiple times - you will see that you get a different output each time!\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>The Random Library</span>"
    ]
  },
  {
    "objectID": "exercise_smarter_dan_10.html",
    "href": "exercise_smarter_dan_10.html",
    "title": "26  Exercise: Putting it all together",
    "section": "",
    "text": "26.1 Are you Smarter than (Dan as) a 4 year old?\nWhen I was 4 years old, I wrote my very first program in BASIC on my Atari 800XL.\nIn it, the computer randomly picked a whole number between 1 and 100, and the user had 10 chances to guess the number.\nEvery time the user guessed a number, they would be told either that the number was “too low”, “too high” or “correct”.\nIf the user used up all 10 chances without guessing correctly, they were told “you lose”, along with what the number was, and the game would end.\nYou’ve been taught enough to write this program in Python. You should write the game above along with the following features that 4-year old Dan didn’t implement :\nYou could also add some bells and whistles of your choosing!\nOpen the exercise in Google Colab:",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Exercise: Putting it all together</span>"
    ]
  },
  {
    "objectID": "exercise_smarter_dan_10.html#are-you-smarter-than-dan-as-a-4-year-old",
    "href": "exercise_smarter_dan_10.html#are-you-smarter-than-dan-as-a-4-year-old",
    "title": "26  Exercise: Putting it all together",
    "section": "",
    "text": "a score, which starts at 1000 and which reduces by 100 for every unsuccessful guess, and which is displayed if the user wins\nthe user’s guesses are stored in a list and printed once the game is over\nthe game asks if the player wants to play again after every game ends\nafter each game, the player’s score is checked against the current high-score (default is 0) and if the last score is higher than the recorded high score then this replaces the high score.",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Exercise: Putting it all together</span>"
    ]
  },
  {
    "objectID": "exercise_smarter_dan_10.html#sample-answers",
    "href": "exercise_smarter_dan_10.html#sample-answers",
    "title": "26  Exercise: Putting it all together",
    "section": "26.2 Sample Answers",
    "text": "26.2 Sample Answers\n\n\n\n\n\n\nClick here to view the answers\n\n\n\n\n\nOpenthe solution in Google Colab:",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Exercise: Putting it all together</span>"
    ]
  },
  {
    "objectID": "exercise_smarter_dan_10.html#answer-video",
    "href": "exercise_smarter_dan_10.html#answer-video",
    "title": "26  Exercise: Putting it all together",
    "section": "26.3 Answer Video",
    "text": "26.3 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n\nThe code for this video is slightly different to the example solution given above.\n\nimport random\n\ncontinue_play = True\nhigh_score = 0\n\nwhile continue_play == True:\n\n    user_guesses_list = []\n    score = 1000\n    guessed_correctly = False\n\n    computer_chosen_number = random.randint(1,100)\n\n    print(\"Welcome to the guessing game! I'm thinking of a number.\")\n    #print(f\"DEBUG: computer number is {computer_chosen_number}\")\n\n    for turn in range(10):\n\n        user_guess = int(input(\"Please enter a number:\"))\n        user_guesses_list.append(user_guess)\n\n        if user_guess == computer_chosen_number:\n            print(\"Correct! You guessed it.\")\n            guessed_correctly = True\n            break\n        elif user_guess &lt; computer_chosen_number:\n            print(\"Too low!\")\n            score -= 100\n        else:\n            print(\"Too high!\")\n            score -= 100\n\n    if not guessed_correctly:\n        print(\"You lose!\")\n        print(f\"The number was {computer_chosen_number}\")\n    else:\n        print(f\"Your score: {score}\")\n\n        if score &gt; high_score:\n            print(f\"New high score! The previous high score was {high_score}\")\n            high_score = score\n        else:\n            print(\"You didn't beat the high score!\")\n            print(f\"High score: {high_score}\")\n\n    print(f\"Your guesses were {user_guesses_list}\")\n\n    keep_playing_input = input(\"Please enter Y to keep playing or N to leave:\")\n\n    if keep_playing_input == \"N\":\n        continue_play = False",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Exercise: Putting it all together</span>"
    ]
  },
  {
    "objectID": "exercise_coding_challenge_1.html",
    "href": "exercise_coding_challenge_1.html",
    "title": "27  Exercise: Coding Challenge 1",
    "section": "",
    "text": "So far, you’ve learned the following Python concepts : = Printing to the display - Variables and casting - User inputs - Comments - Mathematical operators - Conditional Logic - For and While Loops - Working with Lists and List Comprehension - Dictionaries - Libraries / Packages and Imports - The Random Library\nYour task now is to design and build a computer program that uses some or all of the concepts you’ve learned about today.\nYour program can do anything you like - be as creative as possible!\nOpen a blank notebook for this task in Google Colab:",
    "crumbs": [
      "An Introduction to Libraries",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Exercise: Coding Challenge 1</span>"
    ]
  },
  {
    "objectID": "functions.html",
    "href": "functions.html",
    "title": "28  Functions",
    "section": "",
    "text": "28.1 Writing functions\nAs well as the many in-built functions and those in external libraries, we can also write our own functions. Indeed, most programs will (and should) have their own functions, so we don’t have to repeat the same code multiple times.\nTo define a function we use the def command. We specify the function name, the input(s) to the function (if any), and the block of code representing the function’s inner workings. We also usually need to return an output (though not always).\nLet’s consider an example. Let’s say we want to write a function that takes two numbers, multiplies them together, works out whether the result is higher than 100 and returns a Boolean to indicate this.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#writing-functions",
    "href": "functions.html#writing-functions",
    "title": "28  Functions",
    "section": "",
    "text": "Tip\n\n\n\nNote : Good function design is to have the function to do one thing well.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#calling-a-function",
    "href": "functions.html#calling-a-function",
    "title": "28  Functions",
    "section": "28.2 Calling a function",
    "text": "28.2 Calling a function\n\n\n\n\n\n\nTip\n\n\n\nWe’ve now written a function, but at the moment we’ve just told Python that we want a function that looks like this.\nNothing will happen until we tell Python we want to use the function - this is known as calling the function.\n\n\nTry running the cell below. Do you see any output?\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow let’s try again\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can call the function anywhere in our code after the function has been defined, and we can call it as many times as we like.\nAs long as you’ve run one of the cells above, the cells below should work as Python has remembered our function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe must provide any required inputs when we call a function.\nIf an output is returned, we must store it somewhere. In the function below, instead of printing, we are returning a boolean value (true or false)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe could also just print the result directly by wrapping our call to our new function inside the print function.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote - if we pass in variable names as inputs to a function, they don’t need to match the names in the function definition.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#functions-without-inputs",
    "href": "functions.html#functions-without-inputs",
    "title": "28  Functions",
    "section": "28.3 Functions without inputs",
    "text": "28.3 Functions without inputs\n\nSome functions don’t need inputs and / or outputs. Here’s an example of one that has neither inputs nor outputs.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn the above example, the function definition contains nothing in the brackets (no inputs) and no return statements (no outputs - nothing passed back). Because there are no outputs, we just call the function without assigning the output to a variable (because there isn’t one).",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#returning-multiple-values",
    "href": "functions.html#returning-multiple-values",
    "title": "28  Functions",
    "section": "28.4 Returning multiple values",
    "text": "28.4 Returning multiple values\n\nSometimes, you may want to return multiple values from a function. There are basically two ways to do this : Return the values separately Return the values stored in a single structure (eg a list)\nFor the first approach, we list out the values being returned using commas in the return statement, and list out the variables to store those values using commas in the variable assignment when calling the function.\nLet’s look at an example.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s see how we could do the same but returning as a list.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "functions.html#global-and-local-variables",
    "href": "functions.html#global-and-local-variables",
    "title": "28  Functions",
    "section": "28.5 Global and local variables",
    "text": "28.5 Global and local variables\n\nWhen using functions in Python, it’s important to understand the difference between a local and a global variable.\nA local variable is one which lives inside a function, but it has no visibility outside of that. In other words, nothing outside the function can see or use that variable.\nIn the previous example, low, high, number_1, number_2 and number_3 are local variables. If we tried to reference them outside of the function, we’d get an error (though we can create new variables with the same names, but they are different variables to the ones in the function).\n\nA global variable is one which is defined outside of a function. These can be used and referenced anywhere - all of the Python code can see it. However, if we want to change them inside a function, we have to use something known as the global keyword.\n\n\n\n\n\n\nWarning\n\n\n\nThis is not typically recommended though, and is considered bad practice (and can lead to problems, as you can likely imagine), so we won’t teach it here.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Functions</span>"
    ]
  },
  {
    "objectID": "exercise_functions.html",
    "href": "exercise_functions.html",
    "title": "29  Exercise: Functions",
    "section": "",
    "text": "29.1 Sample Answers",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Exercise: Functions</span>"
    ]
  },
  {
    "objectID": "exercise_functions.html#sample-answers",
    "href": "exercise_functions.html#sample-answers",
    "title": "29  Exercise: Functions",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen exercise solutions in Google Colab:",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Exercise: Functions</span>"
    ]
  },
  {
    "objectID": "exercise_functions.html#answer-video",
    "href": "exercise_functions.html#answer-video",
    "title": "29  Exercise: Functions",
    "section": "29.2 Answer Video",
    "text": "29.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n\n29.3 Task 1\n\n\n\n29.4 Task 2",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Exercise: Functions</span>"
    ]
  },
  {
    "objectID": "exercise_functions.html#task-1",
    "href": "exercise_functions.html#task-1",
    "title": "29  Exercise: Functions",
    "section": "29.3 Task 1",
    "text": "29.3 Task 1",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Exercise: Functions</span>"
    ]
  },
  {
    "objectID": "exercise_functions.html#task-2",
    "href": "exercise_functions.html#task-2",
    "title": "29  Exercise: Functions",
    "section": "29.4 Task 2",
    "text": "29.4 Task 2",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Exercise: Functions</span>"
    ]
  },
  {
    "objectID": "exception_handling.html",
    "href": "exception_handling.html",
    "title": "30  Exception (Error) Handling",
    "section": "",
    "text": "30.1 Try and Except\nIn Python, we do this by using try and except statements.\nA try and except statement tells Python to try running the code in the “try” block, and if it runs into any problems, to run the bit of code in the “except” block instead.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Exception (Error) Handling</span>"
    ]
  },
  {
    "objectID": "exception_handling.html#else-and-finally",
    "href": "exception_handling.html#else-and-finally",
    "title": "30  Exception (Error) Handling",
    "section": "30.2 Else and Finally",
    "text": "30.2 Else and Finally\nWhilst Try and Except will suffice for most of our purposes, we can also extend the functionality by using else and finally.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Exception (Error) Handling</span>"
    ]
  },
  {
    "objectID": "file_handling.html",
    "href": "file_handling.html",
    "title": "31  File Handling",
    "section": "",
    "text": "31.1 Reading .csv files in Python\nThere’s a library in Python called csv which allows us to easily read from and write to .csv files. (There’s an even easier approach to using .csv files in Python using Pandas, which you’ll learn about later). Let’s say we wanted to read in a .csv which contained name and age data in the format name, age :\nimport csv # import the csv library\n\n# Set up two empty lists - one to store names, one to store ages\nlist_of_names = []\nlist_of_ages = []\n\n# do the following block of code holding the csv file open in \"read only\" mode\n# (\"r\"), and henceforth we'll refer to this file opened in read only mode as f\n# (alias)\nwith open(\"filename.csv\", \"r\") as f:\n    # Create a csv reader object (we'll come back to that in Object Oriented\n    # Programming), which uses the file opened in read-only mode (f), and where\n    # the delimiter is a comma\n    reader = csv.reader(f, delimiter=\",\")\n\n    # For each row it reads in, take the first value before a comma and add it\n    # to the list of names, and take the second value, and add it to the list\n    # of ages.\n    for row in reader:\n        list_of_names.append(row[0])\n        list_of_ages.append(row[1])",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>File Handling</span>"
    ]
  },
  {
    "objectID": "file_handling.html#writing-.csv-files-in-python",
    "href": "file_handling.html#writing-.csv-files-in-python",
    "title": "31  File Handling",
    "section": "31.2 Writing .csv files in Python",
    "text": "31.2 Writing .csv files in Python\nWe can also write to .csv files in Python using the same library.\n\nimport csv # import the csv library\n\n# Here's a list of column titles\nlist_of_column_titles = [\"Name\", \"ID\"]\n\n# Here's a few lists containing data we want to write out to file\ndata_row_1 = [\"Dan\", 43102]\ndata_row_2 = [\"Sammi\", 31023]\ndata_row_3 = [\"Amy\", 54098]\n\n# Let's combine the data rows into a single list of lists\ncombined_data = [data_row_1, data_row_2, data_row_3]\n\n# Do the following block of code with output.csv opened in write mode (\"w\"),\n# and setting the newline parameter to null (this is a necessary inclusion on\n# Windows, otherwise it'll add an extra line between lines), and refer to it as\n# f\nwith open(\"output.csv\", \"w\", newline='') as f:\n    # Create a csv writer object, which uses f (the file opened in write mode\n    # etc) with a comma delimiter\n    writer = csv.writer(f, delimiter=\",\")\n\n    # Write the first row (the column titles)\n    writer.writerow(list_of_column_titles)\n\n    # Loop through the other data rows and write them (one on each line)\n    for data_row in combined_data:\n        writer.writerow(data_row)\n\nThe resulting csv from this code would look like this.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>File Handling</span>"
    ]
  },
  {
    "objectID": "file_handling.html#file-access-modes",
    "href": "file_handling.html#file-access-modes",
    "title": "31  File Handling",
    "section": "31.3 File access Modes",
    "text": "31.3 File access Modes\n\nThere are a huge number of different file access modes. The most common ones you will use are :\n“r” - open the file read-only, start at the beginning of the file\n“w” - open the file write-only, start at the beginning of the file\n“w+” - open the file read and write, start at the beginning of the file\n“a” - open the file in append mode (a write mode that starts at the end of the file)\n“w”, “w+” and “a” will create a new file with the given name if one does not exist. “r” will throw up an error if the file does not exist.\nIMPORTANT - if you want to add to a file, you MUST use append mode. If you use a write mode, it will start at the beginning, and therefore wipe out your file before it starts.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>File Handling</span>"
    ]
  },
  {
    "objectID": "exercise_exception_and_file_handling.html",
    "href": "exercise_exception_and_file_handling.html",
    "title": "32  Exercise: Handling errors and files",
    "section": "",
    "text": "32.1 Sample Answers",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Exercise: Handling errors and files</span>"
    ]
  },
  {
    "objectID": "exercise_exception_and_file_handling.html#sample-answers",
    "href": "exercise_exception_and_file_handling.html#sample-answers",
    "title": "32  Exercise: Handling errors and files",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen exercise solutions in Google Colab:   \nYou will need to upload the dataset to the solution notebook if you want to run the solutions.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Exercise: Handling errors and files</span>"
    ]
  },
  {
    "objectID": "exercise_exception_and_file_handling.html#answer-video",
    "href": "exercise_exception_and_file_handling.html#answer-video",
    "title": "32  Exercise: Handling errors and files",
    "section": "32.2 Answer Video",
    "text": "32.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n\n32.3 Task 1\n\n\n\n32.4 Task 2\n\n**There were two things I forgot to explain in this solution video!\n\nThe file input_data.csv is in the same folder as the notebook we are working on, so we can just set our file path to be “input_data.csv” rather than having to give the full filepath (like “C:/Users/Sammi/HSMA Exercises/HSMA 1F/Datasets/input_data.csv”)\nin the line with open(\"input_data.csv\", \"r\") as my_file:, the “r” refers to the access mode of the file. “r” just means to want to read the file, as opposed to write new data to it (which would use w).",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Exercise: Handling errors and files</span>"
    ]
  },
  {
    "objectID": "exercise_exception_and_file_handling.html#task-1",
    "href": "exercise_exception_and_file_handling.html#task-1",
    "title": "32  Exercise: Handling errors and files",
    "section": "32.3 Task 1",
    "text": "32.3 Task 1",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Exercise: Handling errors and files</span>"
    ]
  },
  {
    "objectID": "exercise_exception_and_file_handling.html#task-2",
    "href": "exercise_exception_and_file_handling.html#task-2",
    "title": "32  Exercise: Handling errors and files",
    "section": "32.4 Task 2",
    "text": "32.4 Task 2\n\n**There were two things I forgot to explain in this solution video!\n\nThe file input_data.csv is in the same folder as the notebook we are working on, so we can just set our file path to be “input_data.csv” rather than having to give the full filepath (like “C:/Users/Sammi/HSMA Exercises/HSMA 1F/Datasets/input_data.csv”)\nin the line with open(\"input_data.csv\", \"r\") as my_file:, the “r” refers to the access mode of the file. “r” just means to want to read the file, as opposed to write new data to it (which would use w).",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Exercise: Handling errors and files</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_functions_files_error_handling.html",
    "href": "additional_exercises_resources_functions_files_error_handling.html",
    "title": "33  Additional Exercises and Resources - Loops, Lists and Dictionaries",
    "section": "",
    "text": "33.1 Coding Notebooks\nDr Pawel Orzechowski of the University of Edinburgh has made a range of programming exercises freely available.\nYou can visit his Code Storytelling website here to watch some additional videos that go with these exercises.\nPractice Functions:",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Additional Exercises and Resources - Loops, Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_functions_files_error_handling.html#sololearn",
    "href": "additional_exercises_resources_functions_files_error_handling.html#sololearn",
    "title": "33  Additional Exercises and Resources - Loops, Lists and Dictionaries",
    "section": "33.2 Sololearn",
    "text": "33.2 Sololearn\nThere is a course on Sololearn called ‘Introduction to Python’\nThis has some interactive code exercises that build up more gradually. You do have to sign up for a free account - but you don’t need to sign up for the pro trial or a pro account to access 90% of that particular course.\nThere is also an app version of this site for your phone/tablet so you can fit in practice on the go or whenever you have a spare moment.",
    "crumbs": [
      "Functions, Files and error Handling",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Additional Exercises and Resources - Loops, Lists and Dictionaries</span>"
    ]
  },
  {
    "objectID": "intro_to_numpy.html",
    "href": "intro_to_numpy.html",
    "title": "34  An Introduction to NumPy",
    "section": "",
    "text": "34.1 Multidimensional Arrays\nThe main object in NumPy is a multidimensional array. Before we go any further, let’s explain what we mean by a multidimensional array.\nThat seems rather abstract. Let’s think about some more practical examples.\nA list of ages is a 1 dimensional array\n[32, 71, 56, 54, 28]\nA list of ages for each of a number of groups is a 2 dimensional array\nA list of ages for each group within each department is a 3 dimensional array\nA 4 Dimensional Array might have Organisation, Department, Group, Age etc etc\nIn Machine Learning, Multidimensional arrays are common, because we are looking to predict an outcome based on input values (which we call features) - things like patient age, number of admissions etc. And there may be lots of them. And each one adds another dimension to our problem.\nSo we need a solution that allows us to work with multi-dimensional arrays easily and efficiently. NumPy provides us with this via NumPy Arrays - arrays that can be multi-dimensional and upon which we can perform rapid calculations.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>An Introduction to NumPy</span>"
    ]
  },
  {
    "objectID": "intro_to_numpy.html#multidimensional-arrays",
    "href": "intro_to_numpy.html#multidimensional-arrays",
    "title": "34  An Introduction to NumPy",
    "section": "",
    "text": "Group 1 : 32, 71, 56, 54, 28\nGroup 2 : 17, 28, 22, 18, 56\nGroup 3 : 98, 88, 10, 12, 5\n\n\nDepartment 1\nGroup 1 : 32, 71, 56, 54, 28\nGroup 2 : 17, 28, 22, 18, 56\nGroup 3 : 98, 88, 10, 12, 5\n\nDepartment 2\nGroup 1 : 8, 9, 15, 16, 23\nGroup 2 : 21, 37, 45, 42, 46\nGroup 3 : 51, 67, 16, 16, 21",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>An Introduction to NumPy</span>"
    ]
  },
  {
    "objectID": "using_numpy.html",
    "href": "using_numpy.html",
    "title": "35  Using Numpy",
    "section": "",
    "text": "35.1 Homogeneity and Dimension Lengths\nNumPy arrays are homogenous. This means that you can only store the same type of data (e.g. floats, integers etc) across the array.\nThe dimensions of a NumPy array must also be the same length consistently across the array (but can differ across dimensions).\nFor example, we can have an array which represents 3 departments, with 4 groups in each, and 10 people in each group. But we can’t have more or fewer than 10 people in each group, or more or fewer than 4 groups in each department. For real world data, this means we will sometimes have 0 or missing data for some values, and we deal with that differently depending on what we’re trying to represent.\nTo hammer this home, the below is NOT valid (but NumPy will let you do it, it’s just it won’t work as you think - you’ll end up with a 1D array with two values which are references to two lists) :",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Using Numpy</span>"
    ]
  },
  {
    "objectID": "using_numpy.html#homogeneity-and-dimension-lengths",
    "href": "using_numpy.html#homogeneity-and-dimension-lengths",
    "title": "35  Using Numpy",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Using Numpy</span>"
    ]
  },
  {
    "objectID": "using_numpy.html#referring-to-values-indexing-in-numpy-arrays",
    "href": "using_numpy.html#referring-to-values-indexing-in-numpy-arrays",
    "title": "35  Using Numpy",
    "section": "35.2 Referring to values (indexing) in Numpy arrays",
    "text": "35.2 Referring to values (indexing) in Numpy arrays\n\nTo refer to a value in a NumPy array, we specify the index of the value we want in each dimension, starting with the “outermost” dimension.\n\n\n\n\n\n\nTip\n\n\n\nRemember - in Python we start counting from 0!\nSo the ‘first’ element in a numpy array will be 0, the ‘second’ will be 1, and so on.\n\n\nRun each of the cells below and try to understand how the indexing is working in each case.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Using Numpy</span>"
    ]
  },
  {
    "objectID": "using_numpy.html#slicing-numpy-arrays",
    "href": "using_numpy.html#slicing-numpy-arrays",
    "title": "35  Using Numpy",
    "section": "35.3 Slicing numpy arrays",
    "text": "35.3 Slicing numpy arrays\nJust as with lists, we can use slicing to carve out a bit of a multidimensional NumPy array to return only the values we want.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe principle is the same for 3D+ arrays - remember, just count from the outside in.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Using Numpy</span>"
    ]
  },
  {
    "objectID": "using_numpy.html#updating-values",
    "href": "using_numpy.html#updating-values",
    "title": "35  Using Numpy",
    "section": "35.4 Updating Values",
    "text": "35.4 Updating Values\n\nJust like a list, we can update values in a NumPy array just by specifying the indices of the elements we want to update, and the new values.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nNOTE : A lot of the examples you’re about to see use only one or two dimensional arrays for simplicity of understanding. But the same principles apply to arrays of any dimension.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Using Numpy</span>"
    ]
  },
  {
    "objectID": "numpy_features.html",
    "href": "numpy_features.html",
    "title": "36  Handy Numpy Features",
    "section": "",
    "text": "36.1 Empty arrays\nTo create a new empty NumPy array, we can use the empty() function and specify the shape (length of each dimension) of the array we want.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#empty-arrays",
    "href": "numpy_features.html#empty-arrays",
    "title": "36  Handy Numpy Features",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nNote\n\n\n\n“But wait!” you exclaim, “That doesn’t look empty to me!”. The way it actually works is it creates a new array and dumps in some garbage values that are very close to 0 (note the e to the minus at the end of the numbers) based on stuff that’s in memory at the time.\nJust think of it as empty. If you actually want 0s, we use something else (which you’ll see in a moment). But empty() is a little more computationally efficient.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#creating-an-array-of-evenly-spaced-values",
    "href": "numpy_features.html#creating-an-array-of-evenly-spaced-values",
    "title": "36  Handy Numpy Features",
    "section": "36.2 Creating an Array of Evenly-spaced Values",
    "text": "36.2 Creating an Array of Evenly-spaced Values\n\nNumPy has a neat function called arange() which will create a NumPy array with evenly spaced values at an interval of our choosing.\nExample : let’s say we want to create a NumPy array with first value 0 and counting up in intervals of 5 up to 100.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#creating-an-array-of-zeros",
    "href": "numpy_features.html#creating-an-array-of-zeros",
    "title": "36  Handy Numpy Features",
    "section": "36.3 Creating an Array of Zeros",
    "text": "36.3 Creating an Array of Zeros\n\nnumpy.zeros() is a function that creates a NumPy array of given dimensions, filled with zeros. This can be useful if we want to create a placeholder array that we will fill in / update with data as we go.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\neg an array to hold data for five departments, each with 4 groups, each with 3 people.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#shape-and-ndim",
    "href": "numpy_features.html#shape-and-ndim",
    "title": "36  Handy Numpy Features",
    "section": "36.4 Shape and ndim",
    "text": "36.4 Shape and ndim\n\nThe shape attribute stores the length (number of elements) in each dimension.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThe ndim attribute stores the number of dimensions in the array.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#mathematical-operations",
    "href": "numpy_features.html#mathematical-operations",
    "title": "36  Handy Numpy Features",
    "section": "36.5 Mathematical Operations",
    "text": "36.5 Mathematical Operations\n\nOne of the key advantages of NumPy arrays is that you can apply mathematical operations at scale to large numbers of values much more efficiently than you would be able to otherwise.\nIt’s also really easy to do! Let’s imagine we have an array, and we want to double every single value in it.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also combine mathematical operations with slicing to only apply our operation to certain bits of the array.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThis says “for each of the second lists in both groups, replace them with the values doubled”.\nWe could grab these out as a separate array if we wanted.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#statistical-operations",
    "href": "numpy_features.html#statistical-operations",
    "title": "36  Handy Numpy Features",
    "section": "36.6 Statistical Operations",
    "text": "36.6 Statistical Operations\n\nWe can also perform statistical operations on NumPy arrays easily and efficiently. We can find a single mean value across the whole array (the same principle works for slices) :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nOr find means across dimensions of the array :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\naxis = 0 means give the mean across the rows - ie the two lists. So, the mean of element 0 in both, mean of element 1 in both etc\naxis = 1 means give the mean across the columns - ie the mean of each row (list). So, the mean of list 0, the mean of list 1 etc\nAxis values of 2+ are used for third dimensional columns+ (don’t worry if your head’s starting to hurt, that’s normal!)",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#dot-product",
    "href": "numpy_features.html#dot-product",
    "title": "36  Handy Numpy Features",
    "section": "36.7 Dot Product",
    "text": "36.7 Dot Product\n\nThe dot product of two arrays of identical length multiplies the nth element of array a with the nth element of array b, and adds all of these multiplications together to give a single answer.\nExample :\na = [1, 2, 3]\nb = [2, 4, 6]\n\na · b = (1 x 2) + (2 x 4) + (3 x 6) = 2 + 8 + 18 = 28\nTo do this in NumPy, we use the dot() function.\na = [1, 2, 3]\nb = [2, 4, 6]\n\ndp = np.dot(a,b)\n\nprint(dp)\n\n\n\n\n\n\nTip\n\n\n\nDot Product calculations are useful when we want to weight one set of values by another set of values.\nFor example, in a geographic model, we may want to weight travel times by the number of people coming from a location (so that we don’t treat 1 person having to travel a longer distance the same way as 100 people having to do this).",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "numpy_features.html#removing-duplicate-data",
    "href": "numpy_features.html#removing-duplicate-data",
    "title": "36  Handy Numpy Features",
    "section": "36.8 Removing Duplicate Data",
    "text": "36.8 Removing Duplicate Data\n\nThe unique() function allows us to easily remove duplicate values from a NumPy array.\nc = np.array([[1,2,3,4,5], [5,6,7,8,9]])\nc_unique = np.unique(c)\n\nprint(c_unique)\nWe can also use it to remove duplicate rows or columns.\nd = np.array([[1,2,3], [4,5,6],[1,2,3]])\nd_unique = np.unique(d, axis=0)\n\nprint(d_unique)\ne = np.array([[1,2,1], [2,4,2],[3,5,3]])\ne_unique = np.unique(e, axis=0)\n\nprint(e_unique)",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Handy Numpy Features</span>"
    ]
  },
  {
    "objectID": "exercise_numpy.html",
    "href": "exercise_numpy.html",
    "title": "37  Exercise: Numpy",
    "section": "",
    "text": "37.1 Sample Answers",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Exercise: Numpy</span>"
    ]
  },
  {
    "objectID": "exercise_numpy.html#sample-answers",
    "href": "exercise_numpy.html#sample-answers",
    "title": "37  Exercise: Numpy",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen exercise solutions in Google Colab:",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Exercise: Numpy</span>"
    ]
  },
  {
    "objectID": "exercise_numpy.html#answer-video",
    "href": "exercise_numpy.html#answer-video",
    "title": "37  Exercise: Numpy",
    "section": "37.2 Answer Video",
    "text": "37.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n\n37.3 Task 1\n\n\n\n37.4 Task 2",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Exercise: Numpy</span>"
    ]
  },
  {
    "objectID": "exercise_numpy.html#task-1",
    "href": "exercise_numpy.html#task-1",
    "title": "37  Exercise: Numpy",
    "section": "37.3 Task 1",
    "text": "37.3 Task 1",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Exercise: Numpy</span>"
    ]
  },
  {
    "objectID": "exercise_numpy.html#task-2",
    "href": "exercise_numpy.html#task-2",
    "title": "37  Exercise: Numpy",
    "section": "37.4 Task 2",
    "text": "37.4 Task 2",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Exercise: Numpy</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_numpy.html",
    "href": "additional_exercises_resources_numpy.html",
    "title": "38  Additional Exercises and Resources - Numpy",
    "section": "",
    "text": "Practice Numpy:   \nThis notebook comes with some additional features allowing you to get a hint or the solution to each exercise without leaving the notebook!\nYou can query the answer or an hint with hint(n) or answer(n) for n question number.\nSo, for example, hint(15) would give you a hint for question 15.\n\n\n\n\n\n\nNote\n\n\n\nDon’t feel like you have to do every question in this notebook!\nJust try a few of the ones rated 1 star out of 3 (the easiest difficulty) and see how you get on, skipping any you are unsure about or you don’t think we have covered in this book.\nIf you are feeling confident, you can put your Googling skills to the test to try to complete more…\n\n\nCredit for this notebook goes to Nicolas P Rougier. His original repository can be found here.",
    "crumbs": [
      "Numpy",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Additional Exercises and Resources - Numpy</span>"
    ]
  },
  {
    "objectID": "intro_to_pandas.html",
    "href": "intro_to_pandas.html",
    "title": "39  An Introduction to Pandas",
    "section": "",
    "text": "39.1 The Pandas Dataframe\nOne of the most useful structures in Pandas is the Pandas DataFrame. A DataFrame is like a table with different columns (which can have names) for different data fields, and different rows for each entry in the data.\nImagine a table in Excel. Only much more powerful.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>An Introduction to Pandas</span>"
    ]
  },
  {
    "objectID": "intro_to_pandas.html#creating-a-new-dataframe",
    "href": "intro_to_pandas.html#creating-a-new-dataframe",
    "title": "39  An Introduction to Pandas",
    "section": "39.2 Creating a new dataframe",
    "text": "39.2 Creating a new dataframe\n\nWe have two choices when we want to create a new Pandas DataFrame :\n\nWe can create a new DataFrame and then build the DataFrame manually\nWe can read in existing data from a .csv file\n\nGiven that 99% of the time you’ll be doing the latter for real world applications, let’s just focus on that. And it’s also really easy!\nPandas has a fantastic function that allows us to read in data from a .csv file, and it will automatically stuff it into a new DataFrame for us!\nIn one line of code!!\nDon’t believe me? Observe…\n\n\n\n\n\n\nTip\n\n\n\nOne fantastic feature of pandas is that we can point to either a local file (one stored on our machine) or a remote file (one stored somewhere else - like the web).\n\n\nIn the example below, we are accessing a file called input_data.csv.\nIf this file was stored in the same folder as our python file, we would just do\n\ndf = pd.read_csv(\"input_data.csv\")\n\nWe can then show the first 5 rows of the data with the .head() method.\n\ndf.head()\n\n\n\n\n\n\n\n\n\nPatient ID\nName\nFlu Vaccine\nAge\nCounty\n\n\n\n\n0\n65192\nBob\nYes\n42\nCornwall\n\n\n1\n84568\nNigel\nNo\n27\nDevon\n\n\n2\n93765\nFlorence\nYes\n84\nSomerset\n\n\n3\n97865\nMartha\nYes\n57\nSomerset\n\n\n4\n12451\nSimon\nNo\n35\nSomerset\n\n\n\n\n\n\n\n\nHowever, we could also use a web location. We’re going to use this method in the rest of the examples to allow us to interact with pandas dataframes in this book.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can see that the outputs are identical!",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>An Introduction to Pandas</span>"
    ]
  },
  {
    "objectID": "intro_to_pandas.html#the-index",
    "href": "intro_to_pandas.html#the-index",
    "title": "39  An Introduction to Pandas",
    "section": "39.3 The index",
    "text": "39.3 The index",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>An Introduction to Pandas</span>"
    ]
  },
  {
    "objectID": "intro_to_pandas.html#specifying-an-existing-column-as-the-index",
    "href": "intro_to_pandas.html#specifying-an-existing-column-as-the-index",
    "title": "39  An Introduction to Pandas",
    "section": "39.4 Specifying an existing column as the index",
    "text": "39.4 Specifying an existing column as the index\nIn our data, we already have a unique identifier in our data - “Patient ID”. When we read in the .csv, we can tell Pandas that we want to set this column to be the Index (rather than creating a new one).\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIMPORTANT - Pandas will check that the column you specify does truly have unique values. If it doesn’t, it will raise an exception (error) and if you don’t catch it, the code will terminate.\nBe careful when importing data where multiple records refer to the same patient - patient ID would not be a unique identifier in that case.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>An Introduction to Pandas</span>"
    ]
  },
  {
    "objectID": "pandas_indexing.html",
    "href": "pandas_indexing.html",
    "title": "40  Selecting Rows and Columns in Pandas",
    "section": "",
    "text": "40.1 Indexing\nIn Pandas, we can select certain rows and / or columns of data in our DataFrame - this is known as Indexing. Let’s look at some examples using our DataFrame.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Selecting Rows and Columns in Pandas</span>"
    ]
  },
  {
    "objectID": "pandas_indexing.html#indexing",
    "href": "pandas_indexing.html#indexing",
    "title": "40  Selecting Rows and Columns in Pandas",
    "section": "",
    "text": "40.1.1 Retrieve a given column\nWhen we retrieve a given column, note the index is always returned too:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n40.1.2 Retrieve multiple columns\nWhen we retrieve a given column, note the index is always returned too:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n40.1.3 Retrieve a given row (record) (by providing the unique index value)\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n40.1.4 Retrieve multiple given rows\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n40.1.5 Retrieve multiple given rows and only specified columns\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Selecting Rows and Columns in Pandas</span>"
    ]
  },
  {
    "objectID": "pandas_indexing.html#conditional-indexing",
    "href": "pandas_indexing.html#conditional-indexing",
    "title": "40  Selecting Rows and Columns in Pandas",
    "section": "40.2 Conditional Indexing",
    "text": "40.2 Conditional Indexing\n\nWe can also select rows in a DataFrame that meet certain criteria by using conditional logic.\n\n40.2.1 Retrieve all records meeting a single criteria\nHere, we’ll retrieve all records where the county is Cornwall\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nThe following - not using .loc - will also work.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nHow does this work? Let’s first look at what happens when we just run the part inside the square brackets.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe just get a list of ‘true’ and ‘false’ because it’s looking at the ‘county’ value for every row and returning True if it matches “Cornwall”, and False otherwise.\nThis can be called a mask.\nWhen we apply this mask to our dataframe, it returns only the rows where the value in the mask was True.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n40.2.2 More conditional indexing\nThis time, instead of looking for exact matches, we’ll look for something that exceeds a numeric value.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n40.2.3 Multiple Conditions (and)\nLet’s now retrieve all records for patients in Cornwall aged 60 and over.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nWarning\n\n\n\nYou must use ampersand (&) not the word and here\n\n\nWe could also write this all on one line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that you will need brackets around each separate condition when doing this.\n\n\n40.2.4 Multiple Conditions (or)\nLet’s retrieve all records where either the patient lives in Cornwall or they’re aged 60 or over.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nWarning\n\n\n\nYou must use pipe (|) not the word or here\n\n\nWe could also write this all on one line.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Selecting Rows and Columns in Pandas</span>"
    ]
  },
  {
    "objectID": "extending_joining_dataframes.html",
    "href": "extending_joining_dataframes.html",
    "title": "41  Extending and Joining Dataframes",
    "section": "",
    "text": "41.1 Adding data to a dataframe\nWe can add additional rows (and columns) to a DataFrame. To add a row, we must specify the values for all of the columns for this new row. Similarly, to add a column, we must specify the value for this column for all of the rows.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Extending and Joining Dataframes</span>"
    ]
  },
  {
    "objectID": "extending_joining_dataframes.html#adding-data-to-a-dataframe",
    "href": "extending_joining_dataframes.html#adding-data-to-a-dataframe",
    "title": "41  Extending and Joining Dataframes",
    "section": "",
    "text": "41.1.1 Adding rows\nTo add a row, we specify the index value for the new row (that doesn’t yet exist in our DataFrame) and assign a list of values for the other columns :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nWarning\n\n\n\nBe careful - you can overwrite an existing row this way if you provide an index that already exists.\n\n\n\n\n41.1.2 Adding columns\nWe can add a new column as follows.\nHowever - note that you’ll need a value for every single row in your dataset.\nThe code below makes a new dataframe that is just the first 5 rows of the existing dataframe, then adds the new column\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Extending and Joining Dataframes</span>"
    ]
  },
  {
    "objectID": "extending_joining_dataframes.html#concatenation",
    "href": "extending_joining_dataframes.html#concatenation",
    "title": "41  Extending and Joining Dataframes",
    "section": "41.2 Concatenation",
    "text": "41.2 Concatenation\n\nAnother way of adding to our DataFrame is by joining two DataFrames together to create a new one.\nWe can do this using the Pandas concat() method.\n\n\n\n\n\n\nTip\n\n\n\naxis = 0 joins by adding rows\naxis = 1 joins by adding columns\n\n\nFirst, let’s make two new dataframes.\nThis shows you another way you can create a dataframe - by passing a list of dictionaries, where every dictionary in the list represents one row.\nThe keys of the dictionary will be the column names, and the values will be the values in the row.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can then join these with the concat method.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote : in this example, we have entries with duplicate index values. We’d likely want to do something about this, but in practice, the DataFrames you’ll be concatenating will normally have their own unique index that will hold when both are joined.\nIf you do need to reset the index, you can use the .reset_index() method.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that the old index becomes a new column! We can avoid this by passing drop=True.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s have a quick look at concatenating on the other axis.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou may notice that concatenating in this direction feels a bit risky!\nYou may prefer to use the merge method of pandas. The kind of joins available with that method will feel very familiar if you have used SQL.\nUsing merge, you can specify columns or an index that must match, ensuring that the correct rows are matched up.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nLet’s join this to df_a. Run the cell below to remind yourself of what was in that dataframe.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nTip\n\n\n\nNote that because we haven’t got a value in dataframe a for Hugo, we don’t have a record of whether he is a trainer, so in the merged dataframe, we get NaN. This stands for ‘not a number’ and effectively means the cell in the dataframe is blank.\n\n\nYou can read more about the types of joins available in merge here: https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.merge.html",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Extending and Joining Dataframes</span>"
    ]
  },
  {
    "objectID": "removing_data_pandas.html",
    "href": "removing_data_pandas.html",
    "title": "42  Dropping Data from Dataframes",
    "section": "",
    "text": "42.1 Dropping rows and columns\nPandas allows us to easily drop (remove) columns and rows of a DataFrame.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Dropping Data from Dataframes</span>"
    ]
  },
  {
    "objectID": "removing_data_pandas.html#dropping-rows-and-columns",
    "href": "removing_data_pandas.html#dropping-rows-and-columns",
    "title": "42  Dropping Data from Dataframes",
    "section": "",
    "text": "42.1.1 Dropping columns\nLet’s first remind ourselves of what our dataframe looks like. We’ll just print the first five rows by using the head() method.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo drop a single column (multiple columns is the same, just add them to the list of column names):\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote - in the above example, we store a new DataFrame that has the Name column dropped, leaving the original DataFrame intact. This is normally what you want to do.\nIf we want to actually remove it from the original DataFrame, we can either simply assign the above to df (the name of the original DataFrame), thereby overwriting it with a copy that doesn’t have the “Name” column.\n\n\n\n\n\n\nTip\n\n\n\nOR we can use the parameter flag inplace=True to specify the changes should be made to the DataFrame we’re working on.\n\n\n\n\n42.1.2 Dropping Rows\nWe can also drop a row or rows by specifying the index / indices of the row (or rows) we want to drop :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIf you wanted to drop multiple rows that met a condition, we could use conditional indexing from before.\nWe use != (not equal to) to get rid of any rows where the value of county is “Cornwall”.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Dropping Data from Dataframes</span>"
    ]
  },
  {
    "objectID": "removing_data_pandas.html#removing-duplicates",
    "href": "removing_data_pandas.html#removing-duplicates",
    "title": "42  Dropping Data from Dataframes",
    "section": "42.2 Removing Duplicates",
    "text": "42.2 Removing Duplicates\n\nPandas provides us with some powerful tools to drop duplicate rows. First, we can easily drop any rows where all the values (other than the index) are identical.\nLet’s set up a new DataFrame to show this in action. We’ll create one manually here, using a dictionary to store the column names and associated data for each record. We won’t use patient ID as the index here.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nIn this new DataFrame, we have three records (rows) that are duplicates, because they have the same info for the same patient.\nLet’s drop the duplicate rows in one line of code :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nBy default, Pandas will keep the first duplicate (index 0 in the above). But we may want to keep the last duplicate instead (eg if our data related to individual encounters with a service for the same patient - keeping the most recent entry may make the most sense). To do this :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe may also want to change our definition of a “duplicate”. It may be that we don’t need all the values to be the same, just a certain one (or ones) to be considered a duplicate.\nImagine a reconfigured version of our prior table, in which the number of admissions has been updated for patient 105 in the final entry.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe may only want to keep records for a patient where there was a new admission. So we’d want to keep either 0 or 2, and also 3. This will do the trick :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Dropping Data from Dataframes</span>"
    ]
  },
  {
    "objectID": "aggregating_pandas.html",
    "href": "aggregating_pandas.html",
    "title": "43  Aggregating Data in Dataframes",
    "section": "",
    "text": "43.1 Value Counts\nWe can quickly count the number of values for categorical data in a Pandas DataFrame. Let’s say we want to look at the number of those who have vs haven’t been vaccinated in our data.\nWe can combine the above with an indexing operation to, for example, give us the value counts of flu vaccines but only for the county of Cornwall :",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Aggregating Data in Dataframes</span>"
    ]
  },
  {
    "objectID": "aggregating_pandas.html#value-counts",
    "href": "aggregating_pandas.html#value-counts",
    "title": "43  Aggregating Data in Dataframes",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Aggregating Data in Dataframes</span>"
    ]
  },
  {
    "objectID": "aggregating_pandas.html#pivot-tables",
    "href": "aggregating_pandas.html#pivot-tables",
    "title": "43  Aggregating Data in Dataframes",
    "section": "43.2 Pivot Tables",
    "text": "43.2 Pivot Tables\n\nWe can create Pivot Tables quickly and easily in Python (and far more computationally efficiently than Excel, particularly for very large datasets). The resultant Pivot Tables we create are also themselves Pandas DataFrames, and so we can work with them in the same way as any other DataFrame.\nLet’s imagine we want to look at the average age by county in our DataFrame :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo create the table above, we specified\n\nthe name of the DataFrame on which we want to pivot\nthe column we will use as the index\nthe column(s) containing our data of interest\nand the function we want to perform on the data of interest.\n\nThe above basically says “Give me a table that, by county, gives me mean age”\nAs the resultant Pivot Table is a DataFrame itself, we can work with it like any other DataFrame. For example, to retrieve the mean for Cornwall (remember, County is the index in this new DataFrame) :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nTo add more than one value of comparison to your pivot table, you need to pass the values in as a list. For example :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nYou can learn more about pivot tables here.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Aggregating Data in Dataframes</span>"
    ]
  },
  {
    "objectID": "sorting_previewing_more_pandas.html",
    "href": "sorting_previewing_more_pandas.html",
    "title": "44  Sorting, previewing and more with dataframes",
    "section": "",
    "text": "44.1 Sorting values\nWe can sort values easily in Pandas. Let’s imagine we want to sort our original DataFrame by age, then by Patient ID :\nThe above line will change the original DataFrame because we’ve set inplace to True - so we don’t need to assign it back.\nThese two lines are equivalent:\ndf.sort_values(by=[\"Age\"], inplace=True)\n\ndf = df.sort_values(by=[\"Age\"])\nPandas will automatically sort by the index (PatientID here) where the values are equal for the column we are sorting by, so we don’t need to do that manually.\nWe can sort in the other direction by passing the argument ascending=False\nWe can also sort by multiple features at once.\nIf we want to sort these in different orders, we can pass in a list of booleans (True/False) to the ascend argument that are in the same order as our sorting columns.\nThis will",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Sorting, previewing and more with dataframes</span>"
    ]
  },
  {
    "objectID": "sorting_previewing_more_pandas.html#sorting-values",
    "href": "sorting_previewing_more_pandas.html#sorting-values",
    "title": "44  Sorting, previewing and more with dataframes",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nfirst sort by the flu vaccine column in ascending order\nthen, within each group for the flu vaccine column, it will sort by county in descending order\nfinally, within each group for the county column, it will sort people by age in descending order",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Sorting, previewing and more with dataframes</span>"
    ]
  },
  {
    "objectID": "sorting_previewing_more_pandas.html#other-neat-pandas-features",
    "href": "sorting_previewing_more_pandas.html#other-neat-pandas-features",
    "title": "44  Sorting, previewing and more with dataframes",
    "section": "44.2 Other neat pandas features",
    "text": "44.2 Other neat pandas features\n\n\n44.2.1 Describe\nPandas has a describe() function that allows us to get a quick overview of the numerical data in our DataFrame :\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n44.2.2 Previewing the dataset\n\n44.2.2.1 head()\nWe can see the first x number of entries in our DataFrame using head()\nThe default is 5 entries\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nor we can specify a different number.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n44.2.2.2 tail()\nWe can see the last x entries using tail()\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nor we can specify a different number.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n44.2.2.3 sample()\nWe can use the sample() method to see a random selection of rows.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nor we can specify a different number.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n44.2.3 Calculating statistics on a single column\nIt’s easy to take the mean of a column / DataFrame.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nThere are various other options too!\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe could also do the sum on a dataset where that makes sense.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Sorting, previewing and more with dataframes</span>"
    ]
  },
  {
    "objectID": "exercise_pandas.html",
    "href": "exercise_pandas.html",
    "title": "45  Exercise: Pandas",
    "section": "",
    "text": "45.1 Sample Answers",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise: Pandas</span>"
    ]
  },
  {
    "objectID": "exercise_pandas.html#sample-answers",
    "href": "exercise_pandas.html#sample-answers",
    "title": "45  Exercise: Pandas",
    "section": "",
    "text": "Click here to view the answers\n\n\n\n\n\nOpen exercise solutions in Google Colab:   \nYou will need to change the second line in the first code cell (where we import the dataset) to the following to make this work in Google Colab:\ntitanic_df = pd.read_csv(\"https://raw.githubusercontent.com/hsma-programme/h6_1f_python_part_2/main/1f_python_programming_part_2/titanic_dataset.csv\", index_col=\"PassengerId\")",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise: Pandas</span>"
    ]
  },
  {
    "objectID": "exercise_pandas.html#answer-video",
    "href": "exercise_pandas.html#answer-video",
    "title": "45  Exercise: Pandas",
    "section": "45.2 Answer Video",
    "text": "45.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n\n45.3 Importing csvs into pandas\nNOTE! Part of the exercise - setting the index column was forgotten in this video! In the second video, the answer is corrected to include the step of setting the PassengerId column to being the index.\n\n\n\n45.4 Working with data using pandas",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise: Pandas</span>"
    ]
  },
  {
    "objectID": "exercise_pandas.html#importing-csvs-into-pandas",
    "href": "exercise_pandas.html#importing-csvs-into-pandas",
    "title": "45  Exercise: Pandas",
    "section": "45.3 Importing csvs into pandas",
    "text": "45.3 Importing csvs into pandas\nNOTE! Part of the exercise - setting the index column was forgotten in this video! In the second video, the answer is corrected to include the step of setting the PassengerId column to being the index.",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise: Pandas</span>"
    ]
  },
  {
    "objectID": "exercise_pandas.html#working-with-data-using-pandas",
    "href": "exercise_pandas.html#working-with-data-using-pandas",
    "title": "45  Exercise: Pandas",
    "section": "45.4 Working with data using pandas",
    "text": "45.4 Working with data using pandas",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Exercise: Pandas</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_pandas.html",
    "href": "additional_exercises_resources_pandas.html",
    "title": "46  Additional Exercises and Resources - Pandas",
    "section": "",
    "text": "All credit for the following notebooks goes to Guilherme Samora\nSolutions and extra exercises can be found in this repostory\nPractice Getting Data with Pandas:   \nPractice Filtering and Sorting data with Pandas:   \nPractice Grouping data:   \nPractice Merging Data:",
    "crumbs": [
      "Pandas",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Additional Exercises and Resources - Pandas</span>"
    ]
  },
  {
    "objectID": "recap_oop.html",
    "href": "recap_oop.html",
    "title": "47  A recap of object oriented programming",
    "section": "",
    "text": "47.1 An example\nThe pseudocode (i.e. this won’t run in python - but gives you an idea of the structure) shows how we would set up a class and what instances of that class might look like.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>A recap of object oriented programming</span>"
    ]
  },
  {
    "objectID": "recap_oop.html#an-example",
    "href": "recap_oop.html#an-example",
    "title": "47  A recap of object oriented programming",
    "section": "",
    "text": "47.1.1 Class\nCLASS : Ambulance\n\n**Attributes**\nname_of_trust : string\nreg_number : string\npatient_on_board : boolean\nsiren_on : boolean\n\n**Methods**\ndrive (speed : float)\npark (location : string)\nload_patient (patient_name : string)\nunload_patient (patient_name : string)\nturn_on_siren ()\nturn_off_siren ()\n\n\n\n47.1.2 Instances\ndans_ambulance\nname_of_trust = “Chalk NHS Trust”\nreg_number = CH41 LKS\npatient_on_board = False\nsiren_on = True\nsammis_ambulance\nname_of_trust = “Rosser Healthcare”\nreg_number = HS44 MAS\npatient_on_board = True\nsiren_on = True",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>A recap of object oriented programming</span>"
    ]
  },
  {
    "objectID": "recap_oop.html#constructors",
    "href": "recap_oop.html#constructors",
    "title": "47  A recap of object oriented programming",
    "section": "47.2 Constructors",
    "text": "47.2 Constructors\nA constructor defines what happens when an object is instantiated from a class (ie created from a blueprint).\nThe constructor essentially “constructs” the object, specifies the initial values for the attributes, and may even run some methods to start things off.\nThe constructor is itself a method within the class.\nIn our example, the constructor might set up the name of the trust and registration number, and specify that the siren is off and there’s no patient loaded at the start.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>A recap of object oriented programming</span>"
    ]
  },
  {
    "objectID": "intro_to_oopp.html",
    "href": "intro_to_oopp.html",
    "title": "48  An Introduction to Object Oriented Python",
    "section": "",
    "text": "48.1 The structure of a python class\nLet’s look at how we write a Class in Python.\nWe use the class keyword, followed by whatever we want to call our Class to declare a class. Note - class names must start with a capital letter.\nclass MyClass:\n\n    def __init__(self, attribute_1, attribute_2):\n        self.attribute_1 = attribute_1\n        self.attribute_2 = attribute_2\n\n    def method_1(self):\n        print (\"This is method 1!\")\n\n    def method_2(self):\n        print (\"This is method 2!\")",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>An Introduction to Object Oriented Python</span>"
    ]
  },
  {
    "objectID": "intro_to_oopp.html#the-structure-of-a-python-class",
    "href": "intro_to_oopp.html#the-structure-of-a-python-class",
    "title": "48  An Introduction to Object Oriented Python",
    "section": "",
    "text": "48.1.1 The constructor\nThis is the constructor. It is the method that is automatically called whenever we say we want a new instance of our class (instantiation). The purpose is to set up the object ready to use.\n\ndef __init__(self, attribute_1, attribute_2):\n    self.attribute_1 = attribute_1\n    self.attribute_2 = attribute_2\n\nHere, the constructor assigns values to a couple of attributes for any newly created instance based on the two values passed in to it (ignore self - I’ll come back to that in a moment).\nThe double underscore before and after init indicates this is a dunder method (“dunder”= “double underscore”). These are also known as “magic methods”. They’re called automatically when needed.\n\n\n\n\n\n\nMe, myself, and Self\n\n\n\nself is an important concept in Object Oriented Coding in Python. Basically, self stores the instance of the class (ie the copy from the blueprint). It can be a bit weird to get your head around, particularly if you’re new to coding.\nWe declare self as the first input to any method definition in the class. It basically says “Run this class method on this instance” (eg on Dan’s ambulance). BUT, when we call the method, we don’t include self explicitly (Python does this for us, behind the scenes).\nWhenever we need to refer to something belonging to this instance, we say self. to say “Give me the x that belongs to you”. Eg give me the attribute value that you (Dan’s ambulance) is carrying. Or run the method that belongs to you.\nBasically, by using self we refer to the instance of the class (the individual object) rather than the Class itself (the blueprint).\nThis will make more sense as you see examples… Promise… :)\n\n\n\n\n48.1.2 Class methods\nThese are the methods (functions) that the class has. Every class needs at least a constructor, but we can add other things too.\nThese work exactly the same as any other functions, except we always pass in self as the first input in the method definition (even if there are no other inputs).\n\ndef method_1(self):\n    print (\"This is method 1!\")\n\ndef method_2(self):\n    print (\"This is method 2!\")",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>An Introduction to Object Oriented Python</span>"
    ]
  },
  {
    "objectID": "intro_to_oopp.html#an-example-python-class",
    "href": "intro_to_oopp.html#an-example-python-class",
    "title": "48  An Introduction to Object Oriented Python",
    "section": "48.2 An example python class",
    "text": "48.2 An example python class\n\nLet’s look at an example to make this a bit more real.\nLet’s see how we might translate our ambulance Class into Python.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n48.2.1 Instantiating our class (creating an instance of the class)\n\nWe’ve defined our ambulance class now, but, just as with functions, nothing will happen until we use it.\nSo let’s create an instance of the class (instantiation), and play with it a bit.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNote that nothing has been printed out at this point. That’s because we’ve just created the class, so all that’s run so far is the code inside the __init__ method, and there were no statements there that would generate an output.\nLet’s try using some of the class methods.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can also take a look at the attributes of the class.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n48.2.2 Multiple instances of the same class\nA key advantage of OOP is that we only need to define a class once, and then can have multiple instances of it doing different things.\nWhilst Dan’s taken his ambulance off (siren blaring) to the cake shop, maybe Sammi’s actually attending the scene of an incident…\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nWe can see how certain attributes change over time as well.\nAt the moment, we have no patient in our ambulance.\nLet’s check the patient_on_board attribute.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow let’s load another patient. To recap, this is what the load_patient method will do…\n\ndef load_patient(self, patient_name):\n    self.patient_on_board = True\n    print (f\"{patient_name} now on board\")\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nNow, when we unload this patient, the attribute will change again!\nTo recap, this is what the unload_patient method will do…\n\ndef unload_patient(self, patient_name):\n    self.patient_on_board = False\n    print (f\"{patient_name} unloaded\")\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>An Introduction to Object Oriented Python</span>"
    ]
  },
  {
    "objectID": "inheritance.html",
    "href": "inheritance.html",
    "title": "49  Inheritance",
    "section": "",
    "text": "49.1 Inheritance in Python\nInheritance is really easy to do in Python.\nWe’ll start by creating our parent class.\nNote we don’t have to do anything special here - we just define our class as normal, but only containing the things we want to be common to all child classes.\nLet’s create our first child class.\nThe key bits here are as follows:\nclass Ambulance(Vehicle):\n    def __init__(self, reg_number):\n        # This calls the constructor of the parent (super), and passes the reg\n        # number across to it\n        super().__init__(reg_number)\nNotice when we create the Ambulance class, we put the Vehicle class inside the brackets at the beginning.\nThis tells the class to use the Vehicle class as the parent class.\nWe then need to run the line\nto call the constructor of the parent class.\nIn our case, we also want to pass the reg_number to the parent class, so our line looks like this.\nThe full class looks like this:\nYou can see that other than the __init__ method, the rest of the code (i.e. each method) is actually the same as our earlier ambulance code.\nLet’s create two more child classes: bus and car.\nWhen we want to instantiate an ambulance, we do it exactly the same as before.\nIt’s just we’ve saved ourselves having to rewrite some of the definitions that are common to vehicles.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Inheritance</span>"
    ]
  },
  {
    "objectID": "inheritance.html#inheritance-in-python",
    "href": "inheritance.html#inheritance-in-python",
    "title": "49  Inheritance",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\nsuper().__init__()\n\n\nsuper().__init__(reg_number)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nIf the child class contains no differences in its constructor from the parent class, then you don’t need to define the constructor at all in the child class.\n\nIt will automatically use the parent class constructor on instantiation.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Inheritance</span>"
    ]
  },
  {
    "objectID": "reusability.html",
    "href": "reusability.html",
    "title": "50  Reusability",
    "section": "",
    "text": "Let’s look at an example. Here’s a file I created called Penchord_Wizardry.py.\n\nimport random\n\n# Class defining a Penchordian\nclass Penchordian :\n    def __init__(self, name):\n        self.name = name\n        self.is_a_wizard = False\n\n    def write_model(self, type_of_model):\n        print (f\"{self.name} is now writing a {type_of_model} model.\")\n\n    def tell_joke(self, prob_success):\n        if random.uniform(0,1) &lt; prob_success:\n            print (f\"{self.name} attempted a joke.  People loved it!\")\n        else:\n            print (f\"{self.name} attempted a joke.  It fell flat.\")\n\n# Function to turn someone into a wizard\n# Input subject must be an object with a \"name\" string attribute and a\n# \"is_a_wizard\" boolean attribute\ndef turn_into_a_wizard(subject):\n    subject.is_a_wizard = True\n    print (f\"{subject.name} is now a wizard.\")\n\nThen I’m going to create a new file in the same folder as Penchord_Wizardry.py.\n\n\n\n\n\n\nTip\n\n\n\nIt is possible to call in functions from a Python file stored in a different folder or subfolder - but it starts getting quite complicated to navigate to them in the code, so we won’t cover that today.\n\n\nAt the beginning of my new file I’m going to import Penchord_Wizardry to get access to the functions from Penchord_Wizardry.py.\n\n# import the entire Penchord_Wizardry module (the Penchordian class and the\n# turn_into_a_wizard function)\nimport Penchord_Wizardry\n\nimport random\n\nlist_of_penchordian_names = [\"Dan\", \"Sammi\", \"Kerry\", \"Mike\", \"Anna\", \"Tom\",\n                             \"Amy C\", \"Amy H\", \"Chrissie\"]\n\n# Randomly select three PenCHORDian names\n# random.sample selects three elements from a list without replacement\n# (if you want values to be able to be repicked (replacement), use\n# random.choices)\nchosen_penchordian_names = random.sample(list_of_penchordian_names, 3)\n\nlist_of_penchordians = []\n\n# Create some Penchordian objects using the definition from the imported\n# module\nfor name in chosen_penchordian_names:\n    list_of_penchordians.append(Penchord_Wizardry.Penchordian(name))\n\n# Call a couple of the class methods on the three created Penchordian objects\nfor penchordian in list_of_penchordians:\n    penchordian.write_model(\"Discrete Event Simulation\")\n    penchordian.tell_joke(0.1)\n\nTom is now writing a Discrete Event Simulation model.\nTom attempted a joke.  It fell flat.\nKerry is now writing a Discrete Event Simulation model.\nKerry attempted a joke.  It fell flat.\nChrissie is now writing a Discrete Event Simulation model.\nChrissie attempted a joke.  It fell flat.\n\n\nI can also choose just to import the bit(s) of the module I need, rather than the whole thing.\nHere we don’t import the class Penchordian, but we do import the function turn_into_a_wizard.\n\n\n\n\n\n\nTip\n\n\n\nNote that because we’ve imported the specific function by name, we can just then use turn_into_a_wizard.\n\n\n\n# just import the turn_into_a_wizard function\nfrom Penchord_Wizardry import turn_into_a_wizard\n\n# Define a new class called HSMA, which has two attributes - a name, and an\n# is_a_wizard boolean\nclass HSMA:\n    def __init__(self, name):\n        self.name = name\n        self.is_a_wizard = False\n\n# Create a new HSMA object, whose name is Gandalf\nmy_promising_HSMA = HSMA(\"Gandalf\")\n\n# Turn Gandalf into a wizard using the function we imported from the\n# Penchord_Wizardry module\nturn_into_a_wizard(my_promising_HSMA)\n\nGandalf is now a wizard.\n\n\nIn comparison, if we imported the whole module instead, our code would look like this:\n\n# just import the turn_into_a_wizard function\nimport Penchord_Wizardry\n\n# Define a new class called HSMA, which has two attributes - a name, and an\n# is_a_wizard boolean\nclass HSMA:\n    def __init__(self, name):\n        self.name = name\n        self.is_a_wizard = False\n\n# Create a new HSMA object, whose name is Gandalf\nmy_promising_HSMA = HSMA(\"Gandalf\")\n\n# Turn Gandalf into a wizard using the function we imported from the\n# Penchord_Wizardry module\nPenchord_Wizardry.turn_into_a_wizard(my_promising_HSMA)\n\nGandalf is now a wizard.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Reusability</span>"
    ]
  },
  {
    "objectID": "exercise_first_class.html",
    "href": "exercise_first_class.html",
    "title": "51  Exercise: Classes",
    "section": "",
    "text": "51.1 Sample Answers",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise: Classes</span>"
    ]
  },
  {
    "objectID": "exercise_first_class.html#sample-answers",
    "href": "exercise_first_class.html#sample-answers",
    "title": "51  Exercise: Classes",
    "section": "",
    "text": "Click here to view the answer\n\n\n\n\n\nOpen exercise solution:",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise: Classes</span>"
    ]
  },
  {
    "objectID": "exercise_first_class.html#answer-video",
    "href": "exercise_first_class.html#answer-video",
    "title": "51  Exercise: Classes",
    "section": "51.2 Answer Video",
    "text": "51.2 Answer Video\n\n\n\n\n\n\nClick here to view a video explaining the solution\n\n\n\n\n\n51.3 Task 1",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise: Classes</span>"
    ]
  },
  {
    "objectID": "exercise_first_class.html#task-1",
    "href": "exercise_first_class.html#task-1",
    "title": "51  Exercise: Classes",
    "section": "51.3 Task 1",
    "text": "51.3 Task 1",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Exercise: Classes</span>"
    ]
  },
  {
    "objectID": "additional_exercises_resources_oop.html",
    "href": "additional_exercises_resources_oop.html",
    "title": "52  Additional Exercises and Resources - OOP",
    "section": "",
    "text": "Create a notebook or .py file and work through these exercises on Pynative\nSolutions are available on the page.\nSome exercises also have hints available.",
    "crumbs": [
      "Object-Oriented Python",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Additional Exercises and Resources - OOP</span>"
    ]
  },
  {
    "objectID": "intro_to_matplotlib.html",
    "href": "intro_to_matplotlib.html",
    "title": "53  An Introduction to Matplotlib",
    "section": "",
    "text": "53.1 Our first plot\nLet’s start by plotting a basic line plot.\nWe can easily change the style of the line(s) we’re plotting by adding inputs to the plot method of the axes object.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>An Introduction to Matplotlib</span>"
    ]
  },
  {
    "objectID": "intro_to_matplotlib.html#our-first-plot",
    "href": "intro_to_matplotlib.html#our-first-plot",
    "title": "53  An Introduction to Matplotlib",
    "section": "",
    "text": "Warning\n\n\n\nDue to a bug, you may need to click into the plot space after running the code cell to make the plot appear.\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>An Introduction to Matplotlib</span>"
    ]
  },
  {
    "objectID": "intro_to_matplotlib.html#plotting-multiple-lines",
    "href": "intro_to_matplotlib.html#plotting-multiple-lines",
    "title": "53  An Introduction to Matplotlib",
    "section": "53.2 Plotting Multiple Lines",
    "text": "53.2 Plotting Multiple Lines\nHaving different line styles is useful when we have multiple lines in the same plot.\nIt’s easy to add more lines - we just call the plot method of the axes object again.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>An Introduction to Matplotlib</span>"
    ]
  },
  {
    "objectID": "intro_to_matplotlib.html#adding-a-legend",
    "href": "intro_to_matplotlib.html#adding-a-legend",
    "title": "53  An Introduction to Matplotlib",
    "section": "53.3 Adding a legend",
    "text": "53.3 Adding a legend\nAdding a legend is also easy.\nWe just specify we want one, and add the label for each line when we call the plot method.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>An Introduction to Matplotlib</span>"
    ]
  },
  {
    "objectID": "intro_to_matplotlib.html#exporting-matplotlib-charts",
    "href": "intro_to_matplotlib.html#exporting-matplotlib-charts",
    "title": "53  An Introduction to Matplotlib",
    "section": "53.4 Exporting matplotlib charts",
    "text": "53.4 Exporting matplotlib charts\n\n\nfigure_1.savefig(\"figure_1.pdf\")\n\nYou can save it as a range of different file types.\n\nfigure_1.savefig(\"figure_1.png\")\n\nAnd call it whatever you want!\n\nfigure_1.savefig(\"my_plot.jpeg\")\n\nOr put it in a different location, like a subfolder.\n\nfigure_1.savefig(\"my_saved_plots/my_plot.jpeg\")",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>An Introduction to Matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib_chart_types.html",
    "href": "matplotlib_chart_types.html",
    "title": "54  Chart types in matplotlib",
    "section": "",
    "text": "54.1 Line Chart",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Chart types in matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib_chart_types.html#line-chart",
    "href": "matplotlib_chart_types.html#line-chart",
    "title": "54  Chart types in matplotlib",
    "section": "",
    "text": "Please enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Chart types in matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib_chart_types.html#bar-chart",
    "href": "matplotlib_chart_types.html#bar-chart",
    "title": "54  Chart types in matplotlib",
    "section": "54.2 Bar Chart",
    "text": "54.2 Bar Chart\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Chart types in matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib_chart_types.html#scatter-plot",
    "href": "matplotlib_chart_types.html#scatter-plot",
    "title": "54  Chart types in matplotlib",
    "section": "54.3 Scatter Plot",
    "text": "54.3 Scatter Plot\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Chart types in matplotlib</span>"
    ]
  },
  {
    "objectID": "matplotlib_chart_types.html#more-chart-types",
    "href": "matplotlib_chart_types.html#more-chart-types",
    "title": "54  Chart types in matplotlib",
    "section": "54.4 More chart types",
    "text": "54.4 More chart types\nYou can find sample code for a wide range of chart types in the matplotlib documentation.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Chart types in matplotlib</span>"
    ]
  },
  {
    "objectID": "other_plotting_libraries.html",
    "href": "other_plotting_libraries.html",
    "title": "55  Other Plotting Libraries",
    "section": "",
    "text": "55.1 Plotnine\nIf you’ve come from R and made use of the ggplot library, you might like plotnine!\nThis library makes use of the grammar of graphics to build graphs up in steps.\nfrom plotnine import ggplot, geom_line, aes\nfrom plotnine.data import mtcars\nimport pandas as pd\n\ndata = pd.DataFrame()\ndata[\"time\"] = [11,12,23,31,46,52,61,72,83]\ndata[\"count\"] = [23,61,65,81,60,15,29,40,42]\n\n\n(\n    ggplot(data, aes(\"time\", \"count\"))\n    + geom_line()\n)\nPlotnine makes it easy to split data over multiple plots by a category.\nThis example shows a plot of the numbers of miles per gallon achieved by cars with a different number of horsepower, split by flat engines (0) and v-shaped engines (1).\nfrom plotnine.data import mtcars\n\nmtcars.head()\n\n\n\n\n\n\n\n\n\nname\nmpg\ncyl\ndisp\nhp\ndrat\nwt\nqsec\nvs\nam\ngear\ncarb\n\n\n\n\n0\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\n1\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\n2\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\n3\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\n4\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\nfrom plotnine import ggplot, geom_point, aes, stat_smooth, facet_wrap\n(\n    ggplot(mtcars, aes(\"hp\", \"mpg\", color=\"factor(vs)\"))\n    + geom_point()\n    + stat_smooth(method=\"lm\")\n    + facet_wrap(\"vs\")\n)\nYou can read more about the package, and see more code examples, here.",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Other Plotting Libraries</span>"
    ]
  },
  {
    "objectID": "other_plotting_libraries.html#plotnine",
    "href": "other_plotting_libraries.html#plotnine",
    "title": "55  Other Plotting Libraries",
    "section": "",
    "text": "Tip\n\n\n\nIn your own environment on your local machine, you will need to run\n\npip install plotnine",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Other Plotting Libraries</span>"
    ]
  },
  {
    "objectID": "other_plotting_libraries.html#plotly",
    "href": "other_plotting_libraries.html#plotly",
    "title": "55  Other Plotting Libraries",
    "section": "55.2 Plotly",
    "text": "55.2 Plotly\nPlotly is a very powerful library for creating interactive graphs.\nThere are several different ways to create plotly graphs, with the more complex methods giving you more control over the end product.\nHowever, the plotly.express module is a great place to start.\n\nimport pandas as pd\nimport plotly.express as px\n\ndata = pd.DataFrame()\ndata[\"time\"] = [11,12,23,31,46,52,61,72,83]\ndata[\"count\"] = [23,61,65,81,60,15,29,40,42]\n\ndata.head()\n\n\n\n\n\n\n\n\n\ntime\ncount\n\n\n\n\n0\n11\n23\n\n\n1\n12\n61\n\n\n2\n23\n65\n\n\n3\n31\n81\n\n\n4\n46\n60\n\n\n\n\n\n\n\n\n\npx.line(data, x=\"time\", y=\"count\")\n\n                                                \n\n\n\n55.2.1 Bar Chart\n\ndata = pd.DataFrame()\ndata[\"hsma_trainers\"] = [\"Dan\", \"Sammi\", \"Amy\"]\ndata[\"hours_of_teaching\"] = [96, 54, 6]\n\ndata\n\n\n\n\n\n\n\n\n\nhsma_trainers\nhours_of_teaching\n\n\n\n\n0\nDan\n96\n\n\n1\nSammi\n54\n\n\n2\nAmy\n6\n\n\n\n\n\n\n\n\n\npx.bar(data, x=\"hsma_trainers\", y=\"hours_of_teaching\")\n\n                                                \n\n\n\n\n55.2.2 Scatter Plot\n\ndata = pd.DataFrame()\ndata[\"a\"] = [11,52,61,72,83,12,23,31,46]\ndata[\"b\"] = [23,61,65,81,60,15,29,40,42]\n\ndata\n\n\n\n\n\n\n\n\n\na\nb\n\n\n\n\n0\n11\n23\n\n\n1\n52\n61\n\n\n2\n61\n65\n\n\n3\n72\n81\n\n\n4\n83\n60\n\n\n5\n12\n15\n\n\n6\n23\n29\n\n\n7\n31\n40\n\n\n8\n46\n42\n\n\n\n\n\n\n\n\n\npx.scatter(data, x=\"a\", y=\"b\")",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Other Plotting Libraries</span>"
    ]
  },
  {
    "objectID": "other_plotting_libraries.html#seaborn",
    "href": "other_plotting_libraries.html#seaborn",
    "title": "55  Other Plotting Libraries",
    "section": "55.3 Seaborn",
    "text": "55.3 Seaborn\nSeaborn builds on matplotlib. It’s good at creating many kinds of visualisations, but does things a little differently to matplotlib.\nYou can take a look at its documentation to see if you like the way it’s written.\nIf you’re struggling to make a graph in matplotlib, it’s worth checking to see if Seaborn provides this graph type instead!",
    "crumbs": [
      "Graphs",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Other Plotting Libraries</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html",
    "href": "cheatsheets.html",
    "title": "56  Cheatsheets",
    "section": "",
    "text": "56.1 Python\nPython Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html#pandas",
    "href": "cheatsheets.html#pandas",
    "title": "56  Cheatsheets",
    "section": "56.2 Pandas",
    "text": "56.2 Pandas\nDatacamp - Pandas Cheatsheet\nPandas Documentation - Pandas Cheatsheet\nPandas Documentation - R to Pandas Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html#numpy",
    "href": "cheatsheets.html#numpy",
    "title": "56  Cheatsheets",
    "section": "56.3 Numpy",
    "text": "56.3 Numpy\nDatacamp - Numpy Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html#anaconda",
    "href": "cheatsheets.html#anaconda",
    "title": "56  Cheatsheets",
    "section": "56.4 Anaconda",
    "text": "56.4 Anaconda\nConda Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html#matplotlib",
    "href": "cheatsheets.html#matplotlib",
    "title": "56  Cheatsheets",
    "section": "56.5 Matplotlib",
    "text": "56.5 Matplotlib\nMatplotlib Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "cheatsheets.html#converting-between-r-and-python",
    "href": "cheatsheets.html#converting-between-r-and-python",
    "title": "56  Cheatsheets",
    "section": "56.6 Converting between R and Python",
    "text": "56.6 Converting between R and Python\nMIT - R to Python Cheatsheet\nPandas Documentation - R to Pandas Cheatsheet",
    "crumbs": [
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Cheatsheets</span>"
    ]
  },
  {
    "objectID": "further_reading.html",
    "href": "further_reading.html",
    "title": "57  Further Reading",
    "section": "",
    "text": "You can find a list of resources for Python beginners in the Google Sheet below.",
    "crumbs": [
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Further Reading</span>"
    ]
  }
]