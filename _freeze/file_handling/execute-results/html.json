{
  "hash": "d35dca35fc296ca922f9b23add71977a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n# File Handling\n\n\n{{< video https://youtu.be/yYnA1EsJf4s >}}\n\n\n\nSo far, we have only looked at storing data temporarily (in variables).  This data is lost when we shut down.  Similarly, we have got all our inputs from the user when the program runs, but that’s likely not practical for many purposes.\n\nA better approach is to use files to store data that we need longer term.  This might include :\nInput data for our code (e.g. parameters for our model)\nOutput data from our code (e.g. results from our model)\n\nThere are lots of different ways we can do this in Python.  However, for most of the data you’ll be using, you’ll likely want to interact with comma separated value (.csv) files.\n\n.csv files are simply text files that have discrete values separated using commas.  This makes it easy to read them into / export them from tables and spreadsheets.\n\nIn a .csv file, we can think of the data as being separated into rows or records (lines) and columns (with each column of data separated by a comma).\n\n.csv files can be read and opened using any text editor (including VSCode).  They can also be opened using spreadsheet software (eg Excel), which will open them as a spreadsheet - but be warned, it can also add things to it that can cause problems…\n\n![](assets/2024-05-15-12-24-49.png)\n\n## Reading .csv files in Python\n\nThere’s a library in Python called csv which allows us to easily read from and write to .csv files.  (There’s an even easier approach to using .csv files in Python using Pandas, which you’ll learn about later).  Let’s say we wanted to read in a .csv which contained name and age data in the format name, age :\n\n::: {#f0eec5a4 .cell execution_count=1}\n``` {.python .cell-code}\nimport csv # import the csv library\n\n# Set up two empty lists - one to store names, one to store ages\nlist_of_names = []\nlist_of_ages = []\n\n# do the following block of code holding the csv file open in \"read only\" mode\n# (\"r\"), and henceforth we'll refer to this file opened in read only mode as f\n# (alias)\nwith open(\"filename.csv\", \"r\") as f:\n    # Create a csv reader object (we'll come back to that in Object Oriented\n    # Programming), which uses the file opened in read-only mode (f), and where\n    # the delimiter is a comma\n    reader = csv.reader(f, delimiter=\",\")\n\n    # For each row it reads in, take the first value before a comma and add it\n    # to the list of names, and take the second value, and add it to the list\n    # of ages.\n    for row in reader:\n        list_of_names.append(row[0])\n        list_of_ages.append(row[1])\n```\n:::\n\n\n![](assets/2024-05-15-12-25-59.png)\n\n\n## Writing .csv files in Python\n\nWe can also write to .csv files in Python using the same library.\n\n::: {#49a6ab8e .cell execution_count=2}\n``` {.python .cell-code}\nimport csv # import the csv library\n\n# Here's a list of column titles\nlist_of_column_titles = [\"Name\", \"ID\"]\n\n# Here's a few lists containing data we want to write out to file\ndata_row_1 = [\"Dan\", 43102]\ndata_row_2 = [\"Sammi\", 31023]\ndata_row_3 = [\"Amy\", 54098]\n\n# Let's combine the data rows into a single list of lists\ncombined_data = [data_row_1, data_row_2, data_row_3]\n\n# Do the following block of code with output.csv opened in write mode (\"w\"),\n# and setting the newline parameter to null (this is a necessary inclusion on\n# Windows, otherwise it'll add an extra line between lines), and refer to it as\n# f\nwith open(\"output.csv\", \"w\", newline='') as f:\n    # Create a csv writer object, which uses f (the file opened in write mode\n    # etc) with a comma delimiter\n    writer = csv.writer(f, delimiter=\",\")\n\n    # Write the first row (the column titles)\n    writer.writerow(list_of_column_titles)\n\n    # Loop through the other data rows and write them (one on each line)\n    for data_row in combined_data:\n        writer.writerow(data_row)\n```\n:::\n\n\nThe resulting csv from this code would look like this.\n\n![](assets/2024-05-15-12-26-33.png)\n\n## File access Modes\n\n\n{{< video https://youtu.be/isAgpjVnZJc >}}\n\n\n\nThere are a huge number of different file access modes.  The most common ones you will use are :\n\n“r” - open the file read-only, start at the beginning of the file\n\n“w” - open the file write-only, start at the beginning of the file\n\n“w+” - open the file read and write, start at the beginning of the file\n\n“a” - open the file in append mode (a write mode that starts at the end of the file)\n\n“w”, “w+” and “a” will create a new file with the given name if one does not exist.  “r” will throw up an error if the file does not exist.\n\nIMPORTANT - if you want to add to a file, you MUST use append mode.  If you use a write mode, it will start at the beginning, and therefore wipe out your file before it starts.\n\n",
    "supporting": [
      "file_handling_files"
    ],
    "filters": [],
    "includes": {}
  }
}