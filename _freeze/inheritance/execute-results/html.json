{
  "hash": "41b089166d6ab031ae32d9a5d4e768a5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n# Inheritance\n\n\n{{< video https://youtu.be/7oJ0zvA-UMM >}}\n\n\n\nIn Object Oriented Programming, we can also have classes that are based on other classes.  This is known as inheritance.\n\nIn our example, we could create a Vehicle class that has attributes and methods applicable to all vehicles, and then create an Ambulance class which inherits this stuff but adds its own ambulance-specific things too.\n\nThis improves efficiency if we need to write multiple classes that are similar.\n\nIn this example, the Vehicle class would be known as the parent and the Ambulance class as the child.\n\n![](assets/2024-05-20-12-18-22.png)\n\nYou can see how powerful this may be if we have lots of different child classes.\n\n![](assets/2024-05-20-12-18-58.png)\n\n## Inheritance in Python\n\n\n{{< video https://youtu.be/ncw0TuXUV1U >}}\n\n\n\nInheritance is really easy to do in Python.\n\nWe'll start by creating our parent class.\n\nNote we don't have to do anything special here - we just define our class as normal, but only containing the things we want to be common to all child classes.\n\n```{pyodide-python}\nclass Vehicle:\n    def __init__(self, reg_number):\n        self.reg_number = reg_number\n\n    def drive(self, speed):\n        print (f\"Now driving at {speed}mph\")\n\n    def park(self, location):\n        print (f\"Now parked at {location}\")\n```\n\nLet's create our first child class.\n\nThe key bits here are as follows:\n\n::: {#786d8b2c .cell execution_count=1}\n``` {.python .cell-code}\nclass Ambulance(Vehicle):\n    def __init__(self, reg_number):\n        # This calls the constructor of the parent (super), and passes the reg\n        # number across to it\n        super().__init__(reg_number)\n```\n:::\n\n\nNotice when we create the `Ambulance` class, we put the `Vehicle` class inside the brackets at the beginning.\n\nThis tells the class to use the `Vehicle` class as the parent class.\n\nWe then need to run the line\n```\nsuper().__init__()\n```\nto call the constructor of the parent class.\n\nIn our case, we also want to pass the `reg_number` to the parent class, so our line looks like this.\n```\nsuper().__init__(reg_number)\n```\n\nThe full class looks like this:\n\n```{pyodide-python}\n# We pass Vehicle into Ambulance.  This defines Vehicle as the parent, and\n# Ambulance as the child.\nclass Ambulance(Vehicle):\n    def __init__(self, reg_number):\n        # This calls the constructor of the parent (super), and passes the reg\n        # number across to it\n        super().__init__(reg_number)\n\n        self.patient_on_board = False\n        self.siren_on = False\n\n    # We don't need to redefine drive() and park() (unless we want to change\n    # them for an ambulance) as we inherit them automatically.  So we just\n    # define any methods unique to an ambulance.  (If we do want to change one\n    # of the inherited methods, we just redefine them here, with the same name)\n    def load_patient(self, patient_name):\n        self.patient_on_board = True\n        print (f\"{patient_name} now on board\")\n\n    def unload_patient(self, patient_name):\n        self.patient_on_board = False\n        print (f\"{patient_name} unloaded\")\n\n    def turn_on_siren(self):\n        self.siren_on = True\n        print (\"Nee nor nee nor nee nor nee nor nee nor\")\n\n    def turn_off_siren(self):\n        self.siren_on = False\n```\n\nYou can see that other than the `__init__` method, the rest of the code (i.e. each method) is actually the same as our earlier ambulance code.\n\nLet's create two more child classes: `bus` and `car`.\n\n```{pyodide-python}\nclass Bus(Vehicle):\n    def __init__(self, reg_number, passenger_capacity):\n        super().__init__(reg_number)\n        self.passenger_capacity = passenger_capacity\n\n    def open_doors(self):\n        print (\"Doors are open\")\n\n    def close_doors(self):\n        print (\"Doors are closed\")\n\n    def take_fare(self, fare_amount):\n        print (f\"Taken {fare_amount} as fare\")\n```\n\n```{pyodide-python}\nclass Car(Vehicle):\n    def __init__(self, reg_number, number_of_doors):\n        super().__init__(reg_number)\n        self.number_of_doors = number_of_doors\n\n    def open_boot(self):\n        print (\"Boot is open\")\n\n    def close_boot(self):\n        print (\"Boot is closed\")\n```\n\nWhen we want to instantiate an ambulance, we do it exactly the same as before.\n\nIt’s just we’ve saved ourselves having to rewrite some of the definitions that are common to vehicles.\n\n\n```{.callout-note}\nIf the child class contains no differences in its constructor from the parent class, then you don’t need to define the constructor at all in the child class.\n\nIt will automatically use the parent class constructor on instantiation.\n\n```\n\n",
    "supporting": [
      "inheritance_files"
    ],
    "filters": [],
    "includes": {}
  }
}