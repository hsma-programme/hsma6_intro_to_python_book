{
  "hash": "6c11b9553c66ed4912f0598ab480578f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n# An Introduction to NumPy\n\n\n{{< video https://youtu.be/m1GAd7mkftg >}}\n\n\n\nNumPy (“Numerical Python”) is an important Python library for scientific computing.  It provides a number of features, and key amongst them is the ability to easily work with large multidimensional arrays MUCH more efficiently (computationally).\n\nBecause of this, NumPy is particularly important when working in Machine Learning (as you’ll see later in the course).\n\n\nNumPy is already installed in many scientific distributions of Python, such as the Anaconda distribution you have installed.  Therefore in order to work with it in our code, we just need to import the library. Convention dictates that we import the library with the alias “np”, so that we refer to NumPy as “np” in the rest of our code.\n\n::: {#30c76e52 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n```\n:::\n\n\n## Multidimensional Arrays\n\nThe main object in NumPy is a multidimensional array.  Before we go any further, let’s explain what we mean by a multidimensional array.\n\n![](assets/2024-05-15-12-33-46.png)\n\nThat seems rather abstract.  Let’s think about some more practical examples.\n\nA list of ages is a 1 dimensional array\n\n`[32, 71, 56, 54, 28]`\n\nA list of ages for each of a number of groups is a 2 dimensional array\n```\nGroup 1 : 32, 71, 56, 54, 28\nGroup 2 : 17, 28, 22, 18, 56\nGroup 3 : 98, 88, 10, 12, 5\n```\n\n![](assets/2024-05-15-12-34-14.png)\n\nA list of ages for each group within each department is a 3 dimensional array\n\n```\nDepartment 1\nGroup 1 : 32, 71, 56, 54, 28\nGroup 2 : 17, 28, 22, 18, 56\nGroup 3 : 98, 88, 10, 12, 5\n\nDepartment 2\nGroup 1 : 8, 9, 15, 16, 23\nGroup 2 : 21, 37, 45, 42, 46\nGroup 3 : 51, 67, 16, 16, 21\n\n```\n\n![](assets/2024-05-15-12-34-48.png)\n\nA 4 Dimensional Array might have Organisation, Department, Group, Age etc etc\n\nIn Machine Learning, Multidimensional arrays are common, because we are looking to predict an outcome based on input values (which we call features) - things like patient age, number of admissions etc.  And there may be lots of them.  And each one adds another dimension to our problem.\n\nSo we need a solution that allows us to work with multi-dimensional arrays easily and efficiently.  NumPy provides us with this via NumPy Arrays - arrays that can be multi-dimensional and upon which we can perform rapid calculations.\n\n![](assets/2024-05-15-12-35-12.png)\n\n",
    "supporting": [
      "intro_to_numpy_files"
    ],
    "filters": [],
    "includes": {}
  }
}