{
  "hash": "e663f2497df95e98076eadcaf4b727b1",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n# Sorting, previewing and more with dataframes\n\n:::{.callout-tip}\n\nTo allow all the exercises in this section to work, please run this code cell first!\n\nThis will import pandas and load the dataframe we'll be working with.\n\n```{pyodide-python}\nimport pandas as pd\ndf = pd.read_csv(\n    \"https://raw.githubusercontent.com/hsma-programme/h6_1f_python_part_2/main/1f_python_programming_part_2/lecture_examples/input_data.csv\",\n    index_col=\"Patient ID\"\n    )\n```\n\n:::\n\n## Sorting values\n\n\n{{< video https://youtu.be/M4lXWmA1jkk >}}\n\n\n\nWe can sort values easily in Pandas.  Let’s imagine we want to sort our original DataFrame by age, then by Patient ID :\n\n```{pyodide-python}\ndf.sort_values(by=[\"Age\"], inplace=True)\n\ndf\n```\n\nThe above line will change the original DataFrame because we’ve set inplace to True - so we don't need to assign it back.\n\nThese two lines are equivalent:\n\n::: {#b0d4d7e3 .cell execution_count=1}\n``` {.python .cell-code}\ndf.sort_values(by=[\"Age\"], inplace=True)\n\ndf = df.sort_values(by=[\"Age\"])\n```\n:::\n\n\nPandas will automatically sort by the index (PatientID here) where the values are equal for the column we are sorting by, so we don’t need to do that manually.\n\nWe can sort in the other direction by passing the argument `ascending=False`\n\n```{pyodide-python}\ndf.sort_values(by=[\"Age\"], ascending=False)\n```\n\nWe can also sort by multiple features at once.\n\n```{pyodide-python}\ndf.sort_values(by=[\"Flu Vaccine\", \"County\", \"Age\"])\n```\n\nIf we want to sort these in different orders, we can pass in a list of booleans (`True`/`False`) to the ascend argument that are in the same order as our sorting columns.\n\n```{pyodide-python}\ndf.sort_values(\n  by=[\"Flu Vaccine\", \"County\", \"Age\"],\n  ascending=[True, False, False]\n  )\n```\n\nThis will\n\n- first sort by the flu vaccine column in ascending order\n- then, within each group for the flu vaccine column, it will sort by county in descending order\n- finally, within each group for the county column, it will sort people by age in descending order\n\n## Other neat pandas features\n\n\n{{< video https://youtu.be/eDQMCkdWt8Y >}}\n\n\n\n### Describe\n\nPandas has a describe() function that allows us to get a quick overview of the numerical data in our DataFrame :\n\n```{pyodide-python}\ndf.describe()\n```\n\n\n### Previewing the dataset\n\n#### head()\n\nWe can see the first x number of entries in our DataFrame using head()\n\nThe default is 5 entries\n\n```{pyodide-python}\ndf.head()\n```\n\nor we can specify a different number.\n\n```{pyodide-python}\ndf.head(8)\n```\n\n#### tail()\n\nWe can see the last x entries using tail()\n\n```{pyodide-python}\ndf.tail()\n```\n\nor we can specify a different number.\n\n```{pyodide-python}\ndf.tail(8)\n```\n\n#### sample()\n\nWe can use the `sample()` method to see a random selection of rows.\n\n```{pyodide-python}\ndf.sample(1)\n```\n\nor we can specify a different number.\n\n```{pyodide-python}\ndf.sample(6)\n```\n\n### Calculating statistics on a single column\n\nIt’s easy to take the mean of a column / DataFrame.\n\n```{pyodide-python}\ndf[\"Age\"].mean()\n```\n\nThere are various other options too!\n\n```{pyodide-python}\ndf[\"Age\"].median()\n```\n\n```{pyodide-python}\ndf[\"Age\"].min()\n```\n\n```{pyodide-python}\ndf[\"Age\"].max()\n```\n\nWe could also do the sum on a dataset where that makes sense.\n\n```{pyodide-python}\nadmissions_data= {\n  'Patient ID': [105,243,105,105,316],\n  'Age':[76,31,76,76,52],\n  'Admissions':[3,1,3,3,2]\n}\n\nadmissions_df = pd.DataFrame(admissions_data)\n\nadmissions_df[\"Admissions\"].sum()\n```\n\n",
    "supporting": [
      "sorting_previewing_more_pandas_files"
    ],
    "filters": [],
    "includes": {}
  }
}