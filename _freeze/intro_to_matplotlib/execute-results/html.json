{
  "hash": "70998d4c682dc2a037cebf94cf2001b0",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nfilters:\n  - pyodide\n---\n\n# An Introduction to Matplotlib\n\n\n{{< video https://youtu.be/h3afayvOnB4 >}}\n\n\n\nIf we’re going to be building models or analysing data in Python, we’re likely going to want to plot graphs.\n\nWe could export the data and plot it elsewhere, but Python has very nice libraries for plotting. One of the most widely used is MatPlotLib, which is included in the Anaconda distribution of Python.\n\nMatPlotLib offers powerful plotting features (including animated and interactive visualisations) and professional-looking plots.\n\n:::{.callout-info}\nHowever, just to slightly confuse things, historically it has had many different ways of doing exactly the same thing.\n\nTo minimise confusion, and because it is now the officially recommended approach, here we will teach you the Object Oriented approach to using MatPlotLib.\n:::\n\nTo import matplotlib, we use the following :\n\n::: {#f91c7d60 .cell execution_count=1}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n:::{.callout-tip}\n\n\n{{< video https://youtu.be/HIfAXbGJuTc >}}\n\n\n\nThere are two objects in a MatPlotLib graph :\n\nFigure – holds the graph (plotting area)\n\nAxes – An axes object (not to be confused with an axis object) represents a **subplot** within a figure and is normally named ax.\n:::\n\nMost of the time we’ll just have one axes object (that may have multiple lines / points plotted). For figures with multiple subplots (e.g. side by side, 4 in one figure etc), you’d need multiple axes objects (which we normally name axs) - see here for a simple tutorial : https://matplotlib.org/stable/users/explain/axes/axes_intro.html\n\n## Our first plot\n\n\n{{< video https://youtu.be/M-r_1lMECf8 >}}\n\n\n\nLet’s start by plotting a basic line plot.\n\n:::{.callout-warning}\nDue to a bug, you may need to click into the plot space after running the code cell to make the plot appear.\n\n![](assets/2024-05-20-18-28-05.png)\n\n:::\n\n\n```{pyodide-python}\nimport matplotlib.pyplot as plt # provides matlab-style plotting interface\n\n# Data to plot\nx = [1,2,3,4,5,6,7,8,9,10]\ny = [3,7,2,1,4,8,1,2,3,12]\n\n# Create a figure object and an axes object, and add the axes object as a\n# subplot of the figure object\nfigure_1, ax = plt.subplots()\n\n# Set x axis and y axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Number of patients')\n\n# Plot our data (x and y here)\nax.plot(x, y)\n\n# Show the figure\nfigure_1.show()\n```\n\nWe can easily change the style of the line(s) we’re plotting by adding inputs to the plot method of the axes object.\n\n```{pyodide-python}\nimport matplotlib.pyplot as plt # provides matlab-style plotting interface\n\n# Data to plot\nx = [1,2,3,4,5,6,7,8,9,10]\ny = [3,7,2,1,4,8,1,2,3,12]\n\n# Create a figure object and an axes object, and add the axes object as a\n# subplot of the figure object\nfigure_1, ax = plt.subplots()\n\n# Set x axis and y axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Number of patients')\n\n# Plot our data (x and y here)\n# ------------------------------------------- #\n# ** THIS IS THE ONLY LINE WE'VE CHANGED! **  #\n# ------------------------------------------- #\nax.plot(x, y, color=\"red\", linestyle=\"--\")\n\n# Show the figure\nfigure_1.show()\n```\n\n## Plotting Multiple Lines\n\nHaving different line styles is useful when we have multiple lines in the same plot.\n\nIt’s easy to add more lines - we just call the plot method of the axes object again.\n\n```{pyodide-python}\n\nimport matplotlib.pyplot as plt # provides matlab-style plotting interface\n\n# Data to plot\ntime = [1,2,3,4,5,6,7,8,9,10]\n\npatients = [3,7,2,1,4,8,1,2,3,12]\ndoctors = [2,0,1,2,1,1,1,2,0,1]\n\n# Create a figure object and an axes object, and add the axes object as a\n# subplot of the figure object\nfigure_1, ax = plt.subplots()\n\n# Set x axis and y axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Number in Clinic')\n\n# Plot our data, and set each dataset we plot to a different colour / style\nax.plot(time, patients, color=\"blue\", linestyle=\"-\") # Plot patients over time\nax.plot(time, doctors, color=\"red\", linestyle=\":\") # Plot doctors over time\n\n# Show the figure\nfigure_1.show()\n\n```\n\n## Adding a legend\n\nAdding a legend is also easy.\n\nWe just specify we want one, and add the label for each line when we call the plot method.\n\n```{pyodide-python}\nimport matplotlib.pyplot as plt # provides matlab-style plotting interface\n\n# Data to plot\ntime = [1,2,3,4,5,6,7,8,9,10]\n\npatients = [3,7,2,1,4,8,1,2,3,12]\ndoctors = [2,0,1,2,1,1,1,2,0,1]\n\n# Create a figure object and an axes object, and add the axes object as a\n# subplot of the figure object\nfigure_1, ax = plt.subplots()\n\n# Set x axis and y axis labels\nax.set_xlabel('Time')\nax.set_ylabel('Number in Clinic')\n\n# Plot our data, and set each dataset we plot to a different colour / style\n\n# ------------------------------------------------------------------- #\n# Notice we've added the argument 'label = \"the label we want\"' here  #\n# ------------------------------------------------------------------- #\nax.plot(time, patients, color=\"blue\", linestyle=\"-\", label=\"Patients\")\nax.plot(time, doctors, color=\"red\", linestyle=\":\", label=\"Doctors\")\n\n# -------------------------- #\n# Create and set up a legend #\n# -------------------------- #\nax.legend(loc=\"upper left\")\n\n# Show the figure\nfigure_1.show()\n```\n\n\n## Exporting matplotlib charts\n\n\n{{< video https://youtu.be/kUjWaQclC8Y >}}\n\n::: {#ffa9025a .cell execution_count=2}\n``` {.python .cell-code}\nfigure_1.savefig(\"figure_1.pdf\")\n```\n:::\n\n\nYou can save it as a range of different file types.\n\n::: {#1cac723e .cell execution_count=3}\n``` {.python .cell-code}\nfigure_1.savefig(\"figure_1.png\")\n```\n:::\n\n\nAnd call it whatever you want!\n\n::: {#307dce92 .cell execution_count=4}\n``` {.python .cell-code}\nfigure_1.savefig(\"my_plot.jpeg\")\n```\n:::\n\n\nOr put it in a different location, like a subfolder.\n\n::: {#c370ca8c .cell execution_count=5}\n``` {.python .cell-code}\nfigure_1.savefig(\"my_saved_plots/my_plot.jpeg\")\n```\n:::\n\n\n",
    "supporting": [
      "intro_to_matplotlib_files"
    ],
    "filters": [],
    "includes": {}
  }
}